// Prompt Settings Page JavaScript
// –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è OpenAI

// === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
document.addEventListener('DOMContentLoaded', function() {
    console.log('Prompt Settings page loaded');
    
    initializeBackButton();
    initializePromptEditor();
    initializeSuccessModal();
    loadCurrentPrompt();
});

// === –ö–ù–û–ü–ö–ê –ù–ê–ó–ê–î ===
function initializeBackButton() {
    const backButton = document.getElementById('back-button');
    if (backButton) {
        backButton.addEventListener('click', function() {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            window.location.href = 'threads-connection.html';
        });
    }
}

// === –†–ï–î–ê–ö–¢–û–† –ü–†–û–ú–ü–¢–ê ===
function initializePromptEditor() {
    const textarea = document.getElementById('prompt-textarea');
    const charCount = document.getElementById('char-count');
    const saveBtn = document.getElementById('save-prompt');
    const resetBtn = document.getElementById('reset-prompt');
    const previewBox = document.getElementById('preview-box');
    
    // –°—á–µ—Ç—á–∏–∫ —Å–∏–º–≤–æ–ª–æ–≤
    if (textarea && charCount) {
        textarea.addEventListener('input', function() {
            const count = this.value.length;
            charCount.textContent = count;
            updatePreview();
        });
    }
    
    // –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    if (saveBtn) {
        saveBtn.addEventListener('click', savePrompt);
    }
    
    // –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞
    if (resetBtn) {
        resetBtn.addEventListener('click', resetToDefault);
    }
}

// === –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û ===
function initializeSuccessModal() {
    const modal = document.getElementById('success-modal');
    const okBtn = document.getElementById('success-ok-btn');
    
    if (okBtn) {
        okBtn.addEventListener('click', function() {
            hideSuccessModal();
        });
    }
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    if (modal) {
        modal.addEventListener('click', function(e) {
            if (e.target === modal) {
                hideSuccessModal();
            }
        });
    }
}

function showSuccessModal(message) {
    const modal = document.getElementById('success-modal');
    const messageEl = document.getElementById('success-message');
    
    if (modal && messageEl) {
        messageEl.textContent = message;
        modal.style.display = 'flex';
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => {
            modal.style.opacity = '1';
        }, 10);
    }
}

function hideSuccessModal() {
    const modal = document.getElementById('success-modal');
    
    if (modal) {
        modal.style.opacity = '0';
        setTimeout(() => {
            modal.style.display = 'none';
        }, 300);
    }
}

// === –†–ê–ë–û–¢–ê –° –ü–†–û–ú–ü–¢–û–ú ===
function loadCurrentPrompt() {
    const textarea = document.getElementById('prompt-textarea');
    if (!textarea) return;
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç –∏–∑ OpenAI Service
    if (window.openAIService) {
        const currentPrompt = window.openAIService.getCustomPrompt();
        textarea.value = currentPrompt;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–∏–º–≤–æ–ª–æ–≤
        const charCount = document.getElementById('char-count');
        if (charCount) {
            charCount.textContent = currentPrompt.length;
        }
        
        updatePreview();
    }
}

function savePrompt() {
    const textarea = document.getElementById('prompt-textarea');
    const saveBtn = document.getElementById('save-prompt');
    
    if (!textarea) return;
    
    const newPrompt = textarea.value.trim();
    
    if (!newPrompt) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–ø—Ç');
        return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    const originalText = saveBtn.textContent;
    saveBtn.textContent = 'üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º...';
    saveBtn.disabled = true;
    
    try {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ OpenAI Service
        if (window.openAIService) {
            window.openAIService.saveCustomPrompt(newPrompt);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
            showSuccessModal('–ü—Ä–æ–º–ø—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –¢–µ–ø–µ—Ä—å OpenAI –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤.');
        } else {
            throw new Error('OpenAI Service –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
        }
        
    } catch (error) {
        alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ' + error.message);
    }
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
    saveBtn.textContent = originalText;
    saveBtn.disabled = false;
}

function resetToDefault() {
    if (confirm('–í–µ—Ä–Ω—É—Ç—å –ø—Ä–æ–º–ø—Ç –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?')) {
        const textarea = document.getElementById('prompt-textarea');
        
        if (textarea && window.openAIService) {
            // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            const defaultPrompt = `–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π. –°–æ–∑–¥–∞–π —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ—Å—Ç –¥–ª—è Threads.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –î–ª–∏–Ω–∞: 100-280 —Å–∏–º–≤–æ–ª–æ–≤
- –°—Ç–∏–ª—å: –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –Ω–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π
- –î–æ–±–∞–≤—å —ç–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –≤–Ω–∏–º–∞–Ω–∏—è
- –ò—Å–ø–æ–ª—å–∑—É–π —Ö–µ—à—Ç–µ–≥–∏ (1-3 —à—Ç—É–∫–∏)
- –¢–µ–º–∞: [–¢–ï–ú–ê]

–°–æ–∑–¥–∞–π –ø–æ—Å—Ç:`;
            
            textarea.value = defaultPrompt;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–∏–º–≤–æ–ª–æ–≤
            const charCount = document.getElementById('char-count');
            if (charCount) {
                charCount.textContent = defaultPrompt.length;
            }
            
            updatePreview();
        }
    }
}

function updatePreview() {
    const textarea = document.getElementById('prompt-textarea');
    const previewBox = document.getElementById('preview-box');
    
    if (!textarea || !previewBox) return;
    
    const prompt = textarea.value;
    
    if (!prompt.trim()) {
        previewBox.innerHTML = '<p style="color: #6c757d;">–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞...</p>';
        return;
    }
    
    // –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä —Ç–µ–º—ã
    const exampleTopic = '–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö';
    const previewPrompt = prompt.replace(/\[–¢–ï–ú–ê\]/g, exampleTopic);
    
    previewBox.innerHTML = `
        <div style="background: #f8f9fa; padding: 16px; border-radius: 8px; border-left: 4px solid #2196f3;">
            <strong>–ü—Ä–æ–º–ø—Ç —Å –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π —Ç–µ–º–æ–π:</strong><br><br>
            ${previewPrompt.replace(/\n/g, '<br>')}
        </div>
    `;
}

// === –£–¢–ò–õ–ò–¢–´ ===
function getFromStorage(key) {
    try {
        const item = localStorage.getItem(key);
        return item ? JSON.parse(item) : null;
    } catch (error) {
        console.error('Error getting from storage:', error);
        return null;
    }
}

function saveToStorage(key, data) {
    try {
        localStorage.setItem(key, JSON.stringify(data));
        return true;
    } catch (error) {
        console.error('Error saving to storage:', error);
        return false;
    }
}

// === –û–¢–õ–ê–î–ö–ê ===
console.log('Prompt Settings JavaScript loaded successfully');