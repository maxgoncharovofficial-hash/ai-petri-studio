// Threads ZAVOD Navigation JavaScript
// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ —Ä–∞–∑–¥–µ–ª–æ–≤

// === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
document.addEventListener('DOMContentLoaded', function() {
    console.log('Threads ZAVOD main page loaded');
    
    initializeBackButton();
    initializeCards();
    loadMainPageData();
    updateMainPageStats();
});

// === –ö–ù–û–ü–ö–ê –ù–ê–ó–ê–î ===
function initializeBackButton() {
    const backButton = document.getElementById('back-button');
    if (backButton) {
        backButton.addEventListener('click', function() {
            window.location.href = '../index.html';
        });
        
        backButton.addEventListener('touchstart', function(e) {
            e.preventDefault();
            window.location.href = '../index.html';
        });
    }
}

// === –ö–ê–†–¢–û–ß–ö–ò –†–ê–ó–î–ï–õ–û–í ===
function initializeCards() {
    const connectionCard = document.getElementById('connection-section');
    const autopilotCard = document.getElementById('autopilot-section');
    const createCard = document.getElementById('create-section');
    
    if (connectionCard) {
        connectionCard.addEventListener('click', function() {
            console.log('Connection section clicked');
            window.location.href = 'threads-connection.html';
        });
        
        connectionCard.addEventListener('touchstart', function(e) {
            e.preventDefault();
            window.location.href = 'threads-connection.html';
        });
    }
    
    if (autopilotCard) {
        autopilotCard.addEventListener('click', function() {
            console.log('Autopilot section clicked');
            window.location.href = 'threads-autopilot.html';
        });
        
        autopilotCard.addEventListener('touchstart', function(e) {
            e.preventDefault();
            window.location.href = 'threads-autopilot.html';
        });
    }
    
    if (createCard) {
        createCard.addEventListener('click', function() {
            console.log('Create section clicked');
            window.location.href = 'threads-create.html';
        });
        
        createCard.addEventListener('touchstart', function(e) {
            e.preventDefault();
            window.location.href = 'threads-create.html';
        });
    }
}

// === –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ì–õ–ê–í–ù–û–ô –°–¢–†–ê–ù–ò–¶–´ ===
function loadMainPageData() {
    console.log('Loading main page data...');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –∫–∞—Ä—Ç–æ—á–µ–∫
    updateConnectionStatus();
    updateAutopilotStatus();
    updateCreateStatus();
}

function updateConnectionStatus() {
    const connectionData = getFromStorage('threads_connection');
    const scheduleData = getFromStorage('threads_schedule');
    const statusElement = document.getElementById('connection-status');
    
    if (connectionData && connectionData.connected && scheduleData) {
        statusElement.textContent = '[–ù–∞—Å—Ç—Ä–æ–µ–Ω]';
        statusElement.style.color = '#28a745';
        
        // –£–±–∏—Ä–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
        const connectionCard = document.getElementById('connection-section');
        connectionCard.classList.remove('priority');
    } else if (connectionData && connectionData.connected) {
        statusElement.textContent = '[–ü–æ–¥–∫–ª—é—á–µ–Ω]';
        statusElement.style.color = '#ffc107';
    } else {
        statusElement.textContent = '[–ù–∞—Å—Ç—Ä–æ–∏—Ç—å]';
        statusElement.style.color = '#dc3545';
    }
}

function updateAutopilotStatus() {
    const autopilotData = getFromStorage('threads_autopilot');
    const connectionData = getFromStorage('threads_connection');
    const statusElement = document.getElementById('autopilot-status');
    
    if (autopilotData && autopilotData.active && connectionData && connectionData.connected) {
        statusElement.textContent = '[–ê–∫—Ç–∏–≤–µ–Ω]';
        statusElement.style.color = '#28a745';
    } else if (connectionData && connectionData.connected) {
        statusElement.textContent = '[–ì–æ—Ç–æ–≤]';
        statusElement.style.color = '#ffc107';
    } else {
        statusElement.textContent = '[–ù–µ–∞–∫—Ç–∏–≤–µ–Ω]';
        statusElement.style.color = '#6c757d';
    }
}

function updateCreateStatus() {
    const drafts = getFromStorage('threads_drafts') || [];
    const scheduled = getFromStorage('threads_scheduled_posts') || [];
    const statusElement = document.getElementById('create-counter');
    
    const totalContent = drafts.length + scheduled.length;
    
    if (totalContent > 0) {
        statusElement.textContent = `[${totalContent} –≥–æ—Ç–æ–≤–æ]`;
        statusElement.style.color = '#28a745';
    } else {
        statusElement.textContent = '[0 —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤]';
        statusElement.style.color = '#6c757d';
    }
}

// === –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ì–õ–ê–í–ù–û–ô –°–¢–†–ê–ù–ò–¶–´ ===
function updateMainPageStats() {
    updateMainAutopilotStatus();
    updateMainScheduledCount();
    updateMainDraftsCount();
}

function updateMainAutopilotStatus() {
    const autopilotData = getFromStorage('threads_autopilot');
    const connectionData = getFromStorage('threads_connection');
    const scheduleData = getFromStorage('threads_schedule');
    const statusElement = document.getElementById('main-autopilot-status');
    
    if (autopilotData && autopilotData.active && 
        connectionData && connectionData.connected && 
        scheduleData) {
        statusElement.textContent = 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω';
        statusElement.style.color = '#28a745';
    } else if (connectionData && connectionData.connected && scheduleData) {
        statusElement.textContent = 'üü° –ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É';
        statusElement.style.color = '#ffc107';
    } else if (connectionData && connectionData.connected) {
        statusElement.textContent = 'üî∂ –¢—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏';
        statusElement.style.color = '#fd7e14';
    } else {
        statusElement.textContent = 'üî¥ –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω';
        statusElement.style.color = '#dc3545';
    }
}

function updateMainScheduledCount() {
    const scheduled = getFromStorage('threads_scheduled_posts') || [];
    const queue = getFromStorage('threads_queue_posts') || [];
    const statusElement = document.getElementById('main-scheduled-count');
    
    const totalScheduled = scheduled.length + queue.length;
    statusElement.textContent = totalScheduled;
}

function updateMainDraftsCount() {
    const drafts = getFromStorage('threads_drafts') || [];
    const statusElement = document.getElementById('main-drafts-count');
    
    statusElement.textContent = drafts.length;
}

// === –£–¢–ò–õ–ò–¢–´ –õ–û–ö–ê–õ–¨–ù–û–ì–û –•–†–ê–ù–ò–õ–ò–©–ê ===
function saveToStorage(key, data) {
    try {
        localStorage.setItem(key, JSON.stringify(data));
        console.log('Data saved to storage:', key);
    } catch (error) {
        console.error('Error saving to storage:', error);
    }
}

function getFromStorage(key) {
    try {
        const data = localStorage.getItem(key);
        return data ? JSON.parse(data) : null;
    } catch (error) {
        console.error('Error loading from storage:', error);
        return null;
    }
}

function removeFromStorage(key) {
    try {
        localStorage.removeItem(key);
        console.log('Data removed from storage:', key);
    } catch (error) {
        console.error('Error removing from storage:', error);
    }
}

// === –û–¢–õ–ê–î–ö–ê ===
console.log('Threads main navigation loaded successfully');

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
window.threadsMainDebug = {
    saveToStorage,
    getFromStorage,
    removeFromStorage,
    updateMainPageStats,
    loadMainPageData
};
};