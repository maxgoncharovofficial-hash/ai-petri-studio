// Threads ZAVOD Navigation JavaScript
// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ —Ä–∞–∑–¥–µ–ª–æ–≤

// === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
document.addEventListener('DOMContentLoaded', function() {
    console.log('Threads ZAVOD main page loaded');
    
    initializeBackButton();
    initializeCards();
    loadMainPageData();
});

// === –ö–ù–û–ü–ö–ê –ù–ê–ó–ê–î ===
function initializeBackButton() {
    const backButton = document.getElementById('back-button');
    if (backButton) {
        backButton.addEventListener('click', function(e) {
            e.preventDefault();
            console.log('Back button clicked - going to index.html');
            window.location.href = '../index.html';
        });
        
        backButton.addEventListener('touchstart', function(e) {
            e.preventDefault();
            console.log('Back button touched - going to index.html');
            window.location.href = '../index.html';
        });
    } else {
        console.error('Back button not found!');
    }
}

// === –ö–ê–†–¢–û–ß–ö–ò –†–ê–ó–î–ï–õ–û–í ===
function initializeCards() {
    console.log('Initializing cards...');
    
    const connectionCard = document.getElementById('connection-section');
    const autopilotCard = document.getElementById('autopilot-section');
    const createCard = document.getElementById('create-section');
    
    console.log('Cards found:', {
        connection: !!connectionCard,
        autopilot: !!autopilotCard,
        create: !!createCard
    });
    
    if (connectionCard) {
        console.log('Adding listeners to connection card');
        connectionCard.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            console.log('Connection section clicked - navigating...');
            window.location.href = 'threads-connection.html';
        });
        
        connectionCard.addEventListener('touchstart', function(e) {
            e.preventDefault();
            e.stopPropagation();
            console.log('Connection section touched - navigating...');
            window.location.href = 'threads-connection.html';
        });
    } else {
        console.error('Connection card not found!');
    }
    
    if (autopilotCard) {
        console.log('Adding listeners to autopilot card');
        autopilotCard.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            console.log('Autopilot section clicked - navigating...');
            window.location.href = 'threads-autopilot.html';
        });
        
        autopilotCard.addEventListener('touchstart', function(e) {
            e.preventDefault();
            e.stopPropagation();
            console.log('Autopilot section touched - navigating...');
            window.location.href = 'threads-autopilot.html';
        });
    } else {
        console.error('Autopilot card not found!');
    }
    
    if (createCard) {
        console.log('Adding listeners to create card');
        createCard.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            console.log('Create section clicked - navigating...');
            window.location.href = 'threads-create.html';
        });
        
        createCard.addEventListener('touchstart', function(e) {
            e.preventDefault();
            e.stopPropagation();
            console.log('Create section touched - navigating...');
            window.location.href = 'threads-create.html';
        });
    } else {
        console.error('Create card not found!');
    }
}

// === –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ì–õ–ê–í–ù–û–ô –°–¢–†–ê–ù–ò–¶–´ ===
function loadMainPageData() {
    console.log('Loading main page data...');
    
    // –û—Ç–ª–∞–¥–∫–∞ localStorage
    console.log('üì¶ LocalStorage dump:', {
        threads_connection: getFromStorage('threads_connection'),
        threads_schedule: getFromStorage('threads_schedule'), 
        threads_autopilot: getFromStorage('threads_autopilot'),
        allKeys: Object.keys(localStorage).filter(k => k.startsWith('threads_'))
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –∫–∞—Ä—Ç–æ—á–µ–∫
    updateConnectionStatus();
    updateAutopilotStatus();
    updateCreateStatus();
}

function updateConnectionStatus() {
    const connectionData = getFromStorage('threads_connection');
    const scheduleData = getFromStorage('threads_schedule');
    const statusElement = document.getElementById('connection-status');
    
    console.log('üîç updateConnectionStatus:', {
        statusElement,
        connectionData,
        scheduleData,
        hasConnection: !!connectionData?.connected,
        hasSchedule: !!scheduleData,
        connectionKeys: connectionData ? Object.keys(connectionData) : [],
        scheduleKeys: scheduleData ? Object.keys(scheduleData) : []
    });
    
    if (!statusElement) {
        console.error('‚ùå connection-status element not found');
        return;
    }
    
    // –°–±—Ä–æ—Å –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤ —Å—Ç–∞—Ç—É—Å–∞
    statusElement.className = 'section-counter';
    
    if (connectionData && connectionData.connected && scheduleData) {
        statusElement.textContent = '[–ù–∞—Å—Ç—Ä–æ–µ–Ω]';
        statusElement.classList.add('configured');
        console.log('‚úÖ Added configured class');
        
        // –£–±–∏—Ä–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
        const connectionCard = document.getElementById('connection-section');
        connectionCard.classList.remove('priority');
    } else if (connectionData && connectionData.connected) {
        statusElement.textContent = '[–ü–æ–¥–∫–ª—é—á–µ–Ω]';
        statusElement.classList.add('connected');
        console.log('‚úÖ Added connected class');
    } else {
        statusElement.textContent = '[–ù–∞—Å—Ç—Ä–æ–∏—Ç—å]';
        statusElement.classList.add('not-connected');
        console.log('‚úÖ Added not-connected class');
    }
}

function updateAutopilotStatus() {
    const autopilotData = getFromStorage('threads_autopilot');
    const connectionData = getFromStorage('threads_connection');
    const statusElement = document.getElementById('autopilot-status');
    
    console.log('üîç updateAutopilotStatus:', {
        statusElement,
        autopilotData,
        connectionData,
        isAutopilotActive: !!autopilotData?.active,
        isConnected: !!connectionData?.connected,
        autopilotKeys: autopilotData ? Object.keys(autopilotData) : [],
        connectionKeys: connectionData ? Object.keys(connectionData) : []
    });
    
    if (!statusElement) {
        console.error('‚ùå autopilot-status element not found');
        return;
    }
    
    // –°–±—Ä–æ—Å –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤ —Å—Ç–∞—Ç—É—Å–∞
    statusElement.className = 'section-counter';
    
    if (autopilotData && autopilotData.active && connectionData && connectionData.connected) {
        statusElement.textContent = '[–ê–∫—Ç–∏–≤–µ–Ω]';
        statusElement.classList.add('active');
    } else if (connectionData && connectionData.connected) {
        statusElement.textContent = '[–ì–æ—Ç–æ–≤]';
        statusElement.classList.add('ready');
    } else {
        statusElement.textContent = '[–ù–µ–∞–∫—Ç–∏–≤–µ–Ω]';
        statusElement.classList.add('inactive');
    }
}

function updateCreateStatus() {
    const drafts = getFromStorage('threads_drafts') || [];
    const scheduled = getFromStorage('threads_scheduled_posts') || [];
    const statusElement = document.getElementById('create-counter');
    
    const totalContent = drafts.length + scheduled.length;
    
    // –°–±—Ä–æ—Å –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤ —Å—Ç–∞—Ç—É—Å–∞
    statusElement.className = 'section-counter';
    
    if (totalContent > 0) {
        statusElement.textContent = `[${totalContent} –≥–æ—Ç–æ–≤–æ]`;
        statusElement.classList.add('ready');
    } else {
        statusElement.textContent = '[0 —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤]';
        statusElement.classList.add('inactive');
    }
}

// === –£–¢–ò–õ–ò–¢–´ –õ–û–ö–ê–õ–¨–ù–û–ì–û –•–†–ê–ù–ò–õ–ò–©–ê ===
function saveToStorage(key, data) {
    try {
        localStorage.setItem(key, JSON.stringify(data));
        console.log('Data saved to storage:', key);
    } catch (error) {
        console.error('Error saving to storage:', error);
    }
}

function getFromStorage(key) {
    try {
        const data = localStorage.getItem(key);
        return data ? JSON.parse(data) : null;
    } catch (error) {
        console.error('Error loading from storage:', error);
        return null;
    }
}

function removeFromStorage(key) {
    try {
        localStorage.removeItem(key);
        console.log('Data removed from storage:', key);
    } catch (error) {
        console.error('Error removing from storage:', error);
    }
}

// === –û–¢–õ–ê–î–ö–ê ===
console.log('Threads main navigation loaded successfully');

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
window.threadsMainDebug = {
    saveToStorage,
    getFromStorage,
    removeFromStorage,
    loadMainPageData
};