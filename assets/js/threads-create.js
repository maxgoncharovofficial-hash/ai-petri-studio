// Threads Create Post Page JavaScript
// –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤

// === –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ===
let selectedCreationMethod = null;
let currentPost = null;

// === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
document.addEventListener('DOMContentLoaded', function() {
    console.log('Threads Create page loaded');
    
    initializeBackButton();
    initializeCreatePost();
    initializeNavigation();
    updateCreatePageStats();
});

// === –ö–ù–û–ü–ö–ê –ù–ê–ó–ê–î ===
function initializeBackButton() {
    const backButton = document.getElementById('back-button');
    if (backButton) {
        backButton.addEventListener('click', function() {
            window.location.href = 'threads.html';
        });
        
        backButton.addEventListener('touchstart', function(e) {
            e.preventDefault();
            window.location.href = 'threads.html';
        });
    }
}

// === –ù–ê–í–ò–ì–ê–¶–ò–Ø ===
function initializeNavigation() {
    const autopilotButton = document.getElementById('go-to-autopilot');
    const connectionButton = document.getElementById('go-to-connection');
    const improveButton = document.getElementById('improve-ai');
    
    if (autopilotButton) {
        autopilotButton.addEventListener('click', function() {
            window.location.href = 'threads-autopilot.html';
        });
    }
    
    if (connectionButton) {
        connectionButton.addEventListener('click', function() {
            window.location.href = 'threads-connection.html';
        });
    }
    
    if (improveButton) {
        improveButton.addEventListener('click', function() {
            window.location.href = 'personality.html';
        });
    }
}

// === –°–û–ó–î–ê–ù–ò–ï –ü–û–°–¢–û–í ===
function initializeCreatePost() {
    const aiButton = document.getElementById('ai-generate');
    const manualButton = document.getElementById('write-manual');
    const templateButton = document.getElementById('use-template');
    const textarea = document.getElementById('post-content');
    const publishButtons = document.querySelectorAll('.publish-button');
    
    if (aiButton) {
        aiButton.addEventListener('click', () => selectCreationMethod('ai'));
    }
    
    if (manualButton) {
        manualButton.addEventListener('click', () => selectCreationMethod('manual'));
    }
    
    if (templateButton) {
        templateButton.addEventListener('click', () => selectCreationMethod('template'));
    }
    
    if (textarea) {
        textarea.addEventListener('input', updateCharCounter);
        textarea.addEventListener('input', updatePreview);
    }
    
    publishButtons.forEach(button => {
        button.addEventListener('click', function() {
            const action = this.id.replace('publish-', '').replace('save-', '');
            handlePublishAction(action);
        });
    });
    
    // AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
    initializeAIGeneration();
    
    // –®–∞–±–ª–æ–Ω—ã
    initializeTemplates();
    
    // –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
    initializeEditorTools();
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    initializeStatsButtons();
}

function selectCreationMethod(method) {
    console.log('Creation method selected:', method);
    selectedCreationMethod = method;
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ–ø—Ü–∏–∏
    document.getElementById('ai-options').style.display = 'none';
    document.getElementById('template-section').style.display = 'none';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–µ –æ–ø—Ü–∏–∏
    if (method === 'ai') {
        document.getElementById('ai-options').style.display = 'block';
    } else if (method === 'template') {
        document.getElementById('template-section').style.display = 'block';
    } else {
        showEditor();
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
    document.querySelectorAll('.method-button').forEach(btn => btn.classList.remove('selected'));
    const buttons = {
        'ai': 'ai-generate',
        'manual': 'write-manual', 
        'template': 'use-template'
    };
    document.getElementById(buttons[method]).classList.add('selected');
}

// === –ò–ò –ì–ï–ù–ï–†–ê–¶–ò–Ø ===
function initializeAIGeneration() {
    const generateButton = document.getElementById('generate-ai-post');
    
    if (generateButton) {
        generateButton.addEventListener('click', generateAIPost);
    }
}

function generateAIPost() {
    const postType = document.getElementById('post-type').value;
    const tone = document.getElementById('post-tone').value;
    const length = document.getElementById('post-length').value;
    
    console.log('Generating AI post:', { postType, tone, length });
    
    showEditor();
    
    const textarea = document.getElementById('post-content');
    textarea.value = '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞...';
    
    setTimeout(() => {
        const aiPosts = generatePostByType(postType, tone, length);
        textarea.value = aiPosts;
        updateCharCounter();
        updatePreview();
    }, 2000);
}

function generatePostByType(type, tone, length) {
    const posts = {
        'advice': [
            '–°–æ–≤–µ—Ç –¥–Ω—è: –ù–µ –±–æ–π—Ç–µ—Å—å –Ω–∞—á–∏–Ω–∞—Ç—å —Å –º–∞–ª–æ–≥–æ. –ö–∞–∂–¥—ã–π —ç–∫—Å–ø–µ—Ä—Ç –∫–æ–≥–¥–∞-—Ç–æ –±—ã–ª –Ω–æ–≤–∏—á–∫–æ–º. –ì–ª–∞–≤–Ω–æ–µ ‚Äî –¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–π —à–∞–≥ –∏ —É—á–∏—Ç—å—Å—è –Ω–∞ –æ—à–∏–±–∫–∞—Ö. üí™',
            '–õ–∞–π—Ñ—Ö–∞–∫ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: –¢–µ—Ö–Ω–∏–∫–∞ "–ø–æ–º–∏–¥–æ—Ä–∞" –∏–∑–º–µ–Ω–∏–ª–∞ –º–æ–π –ø–æ–¥—Ö–æ–¥ –∫ —Ä–∞–±–æ—Ç–µ. 25 –º–∏–Ω—É—Ç —Ñ–æ–∫—É—Å–∞, 5 –º–∏–Ω—É—Ç –æ—Ç–¥—ã—Ö–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ! üçÖ'
        ],
        'experience': [
            '–ü–æ–¥–µ–ª—é—Å—å –∏—Å—Ç–æ—Ä–∏–µ–π: –ì–æ–¥ –Ω–∞–∑–∞–¥ –±–æ—è–ª—Å—è –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–µ–∫—Ç. –°–µ–≥–æ–¥–Ω—è –ø–æ–Ω–∏–º–∞—é ‚Äî —Å—Ç—Ä–∞—Ö –±—ã–ª –Ω–∞–ø—Ä–∞—Å–Ω—ã–º. –°–∞–º–æ–µ —Å–ª–æ–∂–Ω–æ–µ ‚Äî –Ω–∞—á–∞—Ç—å. üöÄ',
            '–ù–µ–¥–∞–≤–Ω–æ –ø–æ–Ω—è–ª –≤–∞–∂–Ω—É—é –≤–µ—â—å: –∫–ª–∏–µ–Ω—Ç—ã –ø–æ–∫—É–ø–∞—é—Ç –Ω–µ –ø—Ä–æ–¥—É–∫—Ç, –∞ —Ä–µ—à–µ–Ω–∏–µ —Å–≤–æ–µ–π –ø—Ä–æ–±–ª–µ–º—ã. –≠—Ç–æ—Ç –∏–Ω—Å–∞–π—Ç –∏–∑–º–µ–Ω–∏–ª –º–æ–π –ø–æ–¥—Ö–æ–¥ –∫ –ø—Ä–æ–¥–∞–∂–∞–º. üí°'
        ],
        'insight': [
            '–†–∞–∑–º—ã—à–ª–µ–Ω–∏—è: –í —ç–ø–æ—Ö—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —à—É–º–∞ —Ü–µ–Ω–Ω–æ—Å—Ç—å –Ω–µ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –∞ –≤ –µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–µ –∏ –ø–æ–ª—å–∑–µ –¥–ª—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏. üß†',
            '–ó–∞–º–µ—Ç–∏–ª –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å: —á–µ–º –ø—Ä–æ—â–µ –æ–±—ä—è—Å–Ω—è–µ—à—å —Å–ª–æ–∂–Ω—ã–µ –≤–µ—â–∏, —Ç–µ–º –±–æ–ª—å—à–µ –¥–æ–≤–µ—Ä–∏—è –≤—ã–∑—ã–≤–∞–µ—à—å —É –∞—É–¥–∏—Ç–æ—Ä–∏–∏. üéØ'
        ],
        'story': [
            '–ò—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—Ö–∞: –ö–ª–∏–µ–Ω—Ç —É–≤–µ–ª–∏—á–∏–ª –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ 300% –∑–∞ 3 –º–µ—Å—è—Ü–∞. –°–µ–∫—Ä–µ—Ç? –ú—ã –∏–∑–º–µ–Ω–∏–ª–∏ –Ω–µ –ø—Ä–æ–¥—É–∫—Ç, –∞ —Å–ø–æ—Å–æ–± –µ–≥–æ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏. üìà',
            '–ö–µ–π—Å –∏–∑ –ø—Ä–∞–∫—Ç–∏–∫–∏: –ö–∞–∫ –æ–¥–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –≤–æ—Ä–æ–Ω–∫–µ –ø—Ä–æ–¥–∞–∂ –ø—Ä–∏–Ω–µ—Å–ª–æ +50% –∫–æ–Ω–≤–µ—Ä—Å–∏–∏. –î–µ–ª—é—Å—å –¥–µ—Ç–∞–ª—è–º–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö. üí∞'
        ],
        'question': [
            '–í–æ–ø—Ä–æ—Å –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É: –ö–∞–∫ –≤—ã —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å —Å –≤—ã–≥–æ—Ä–∞–Ω–∏–µ–º –≤ —Ä–∞–±–æ—Ç–µ? –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö. ü§î',
            '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ: –ß—Ç–æ –≤–∞–∂–Ω–µ–µ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞–ø–∞ ‚Äî –∏–¥–µ—è –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞? –ñ–¥—É –≤–∞—à–∏ –º—ã—Å–ª–∏! üí≠'
        ]
    };
    
    const typesPosts = posts[type] || posts['advice'];
    return typesPosts[Math.floor(Math.random() * typesPosts.length)];
}

// === –®–ê–ë–õ–û–ù–´ ===
function initializeTemplates() {
    const templateCards = document.querySelectorAll('.template-card');
    
    templateCards.forEach(card => {
        card.addEventListener('click', function() {
            const template = this.getAttribute('data-template');
            loadTemplate(template);
        });
    });
}

function loadTemplate(templateType) {
    const templates = {
        'experience': '–ü–æ–¥–µ–ª—é—Å—å –æ–ø—ã—Ç–æ–º: [–≤–∞—à –æ–ø—ã—Ç]\n\n–ß—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ –º–æ–∂–Ω–æ –∏–∑–≤–ª–µ—á—å:\n‚Ä¢ [–ø—É–Ω–∫—Ç 1]\n‚Ä¢ [–ø—É–Ω–∫—Ç 2]\n‚Ä¢ [–ø—É–Ω–∫—Ç 3]\n\n–ê —É –≤–∞—Å –µ—Å—Ç—å –ø–æ–¥–æ–±–Ω—ã–π –æ–ø—ã—Ç? ü§î',
        'problem-solution': '–ü—Ä–æ–±–ª–µ–º–∞: [–æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã]\n\n–†–µ—à–µ–Ω–∏–µ: [–≤–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ]\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç: [–¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç]\n\n–¢–∞–∫–æ–π –ø–æ–¥—Ö–æ–¥ –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –∏ –≤–∞–º! üí°',
        'insight': '–°–µ–≥–æ–¥–Ω—è –ø–æ–Ω—è–ª –≤–∞–∂–Ω—É—é –≤–µ—â—å: [–≤–∞—à –∏–Ω—Å–∞–π—Ç]\n\n–≠—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ –º–æ–π –≤–∑–≥–ª—è–¥ –Ω–∞ [–æ–±–ª–∞—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è]\n\n–ê —á—Ç–æ –¥—É–º–∞–µ—Ç–µ –≤—ã? üß†',
        'question': '–í–æ–ø—Ä–æ—Å –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É: [–≤–∞—à –≤–æ–ø—Ä–æ—Å]\n\n[–∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–ª–∏ –ª–∏—á–Ω—ã–π –æ–ø—ã—Ç]\n\n–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö! üí≠'
    };
    
    showEditor();
    
    const textarea = document.getElementById('post-content');
    textarea.value = templates[templateType] || templates['experience'];
    updateCharCounter();
    updatePreview();
    
    // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω
    document.querySelectorAll('.template-card').forEach(card => card.classList.remove('selected'));
    document.querySelector(`[data-template="${templateType}"]`).classList.add('selected');
}

// === –†–ï–î–ê–ö–¢–û–† ===
function showEditor() {
    document.getElementById('editor-section').style.display = 'block';
    document.getElementById('publishing-section').style.display = 'block';
    
    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä—É
    document.getElementById('editor-section').scrollIntoView({ behavior: 'smooth' });
}

function initializeEditorTools() {
    const emojiButton = document.getElementById('add-emoji');
    const hashtagButton = document.getElementById('add-hashtag');
    const formatButton = document.getElementById('format-text');
    
    if (emojiButton) {
        emojiButton.addEventListener('click', addEmoji);
    }
    
    if (hashtagButton) {
        hashtagButton.addEventListener('click', addHashtag);
    }
    
    if (formatButton) {
        formatButton.addEventListener('click', formatText);
    }
}

function addEmoji() {
    const emojis = ['üí°', 'üöÄ', 'üìà', 'üí™', 'üéØ', '‚ú®', 'üî•', 'üëè', 'üí∞', 'üß†'];
    const randomEmoji = emojis[Math.floor(Math.random() * emojis.length)];
    
    const textarea = document.getElementById('post-content');
    const start = textarea.selectionStart;
    const end = textarea.selectionEnd;
    
    textarea.value = textarea.value.substring(0, start) + randomEmoji + textarea.value.substring(end);
    textarea.focus();
    textarea.setSelectionRange(start + randomEmoji.length, start + randomEmoji.length);
    
    updateCharCounter();
    updatePreview();
}

function addHashtag() {
    const hashtags = ['#–±–∏–∑–Ω–µ—Å', '#–º–∞—Ä–∫–µ—Ç–∏–Ω–≥', '#–ø—Ä–æ–¥–∞–∂–∏', '#—Å—Ç–∞—Ä—Ç–∞–ø', '#—É—Å–ø–µ—Ö', '#–º–æ—Ç–∏–≤–∞—Ü–∏—è'];
    const randomHashtag = hashtags[Math.floor(Math.random() * hashtags.length)];
    
    const textarea = document.getElementById('post-content');
    const start = textarea.selectionStart;
    const end = textarea.selectionEnd;
    
    textarea.value = textarea.value.substring(0, start) + randomHashtag + textarea.value.substring(end);
    textarea.focus();
    textarea.setSelectionRange(start + randomHashtag.length, start + randomHashtag.length);
    
    updateCharCounter();
    updatePreview();
}

function formatText() {
    alert('–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)');
}

function updateCharCounter() {
    const textarea = document.getElementById('post-content');
    const counter = document.getElementById('char-count');
    const indicator = document.getElementById('char-indicator');
    
    if (textarea && counter) {
        const count = textarea.value.length;
        counter.textContent = count;
        
        // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
        if (count > 450) {
            counter.style.color = '#dc3545';
            indicator.textContent = '‚ùå';
        } else if (count > 400) {
            counter.style.color = '#ffc107';
            indicator.textContent = '‚ö†Ô∏è';
        } else {
            counter.style.color = '#6c757d';
            indicator.textContent = 'üìù';
        }
    }
}

function updatePreview() {
    const textarea = document.getElementById('post-content');
    const preview = document.getElementById('preview-content');
    
    if (textarea && preview) {
        const content = textarea.value || '–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å...';
        preview.textContent = content;
    }
}

// === –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø ===
function handlePublishAction(action) {
    const textarea = document.getElementById('post-content');
    const content = textarea.value.trim();
    
    if (!content) {
        alert('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞');
        return;
    }
    
    console.log('Publish action:', action, 'Content:', content);
    
    switch (action) {
        case 'now':
            publishNow(content);
            break;
        case 'schedule':
            showSchedulingCalendar(content);
            break;
        case 'queue':
            addToQueue(content);
            break;
        case 'draft':
            saveDraft(content);
            break;
    }
}

function publishNow(content) {
    // –°–∏–º—É–ª—è—Ü–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    alert('üì§ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
    const publishedPosts = getFromStorage('threads_published_posts') || [];
    publishedPosts.unshift({
        content: content,
        publishedAt: new Date().toISOString(),
        method: selectedCreationMethod || 'manual'
    });
    saveToStorage('threads_published_posts', publishedPosts);
    
    // –û—á–∏—â–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä
    clearEditor();
    updateCreatePageStats();
}

function showSchedulingCalendar(content) {
    const calendar = document.getElementById('scheduling-calendar');
    calendar.style.display = 'block';
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    saveToStorage('threads_temp_post_content', content);
    
    // –ó–∞–≥–ª—É—à–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    const container = document.getElementById('schedule-calendar-container');
    container.innerHTML = `
        <div style="text-align: center; padding: 40px; color: #6c757d;">
            <div style="font-size: 48px; margin-bottom: 16px;">üìÖ</div>
            <div>–ö–∞–ª–µ–Ω–¥–∞—Ä—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</div>
            <div style="font-size: 14px; margin-top: 8px;">–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</div>
            <button onclick="scheduleForTomorrow()" style="margin-top: 16px; padding: 8px 16px; border: 1px solid #4dabf7; background: #4dabf7; color: white; border-radius: 6px; cursor: pointer;">–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –∑–∞–≤—Ç—Ä–∞</button>
        </div>
    `;
    
    calendar.scrollIntoView({ behavior: 'smooth' });
}

function scheduleForTomorrow() {
    const content = getFromStorage('threads_temp_post_content');
    if (!content) return;
    
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    tomorrow.setHours(10, 0, 0, 0);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç
    const scheduledPosts = getFromStorage('threads_scheduled_posts') || [];
    scheduledPosts.push({
        content: content,
        scheduledFor: tomorrow.toISOString(),
        createdAt: new Date().toISOString(),
        status: 'scheduled'
    });
    
    saveToStorage('threads_scheduled_posts', scheduledPosts);
    removeFromStorage('threads_temp_post_content');
    
    // –°–∫—Ä—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    document.getElementById('scheduling-calendar').style.display = 'none';
    
    clearEditor();
    updateCreatePageStats();
    
    alert(`üìÖ –ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 10:00`);
}

function addToQueue(content) {
    const queuePosts = getFromStorage('threads_queue_posts') || [];
    queuePosts.push({
        content: content,
        addedAt: new Date().toISOString(),
        status: 'queued'
    });
    
    saveToStorage('threads_queue_posts', queuePosts);
    
    clearEditor();
    updateCreatePageStats();
    
    alert('üíæ –ü–æ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –∞–≤—Ç–æ–ø–∏–ª–æ—Ç–∞');
}

function saveDraft(content) {
    const drafts = getFromStorage('threads_drafts') || [];
    drafts.push({
        content: content,
        createdAt: new Date().toISOString(),
        status: 'draft'
    });
    
    saveToStorage('threads_drafts', drafts);
    
    clearEditor();
    updateCreatePageStats();
    
    alert('üìÑ –ü–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫');
}

function clearEditor() {
    document.getElementById('post-content').value = '';
    updateCharCounter();
    updatePreview();
    
    // –°–∫—Ä—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏–∏
    document.getElementById('editor-section').style.display = 'none';
    document.getElementById('publishing-section').style.display = 'none';
    document.getElementById('ai-options').style.display = 'none';
    document.getElementById('template-section').style.display = 'none';
    
    // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    document.querySelectorAll('.method-button').forEach(btn => btn.classList.remove('selected'));
    document.querySelectorAll('.template-card').forEach(card => card.classList.remove('selected'));
    
    selectedCreationMethod = null;
}

// === –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===
function updateCreatePageStats() {
    updateDraftsCount();
    updateScheduledCount();
    updateQueueCount();
    updatePublishedCount();
}

function updateDraftsCount() {
    const drafts = getFromStorage('threads_drafts') || [];
    document.getElementById('drafts-count').textContent = drafts.length;
}

function updateScheduledCount() {
    const scheduled = getFromStorage('threads_scheduled_posts') || [];
    document.getElementById('scheduled-count').textContent = scheduled.length;
}

function updateQueueCount() {
    const queue = getFromStorage('threads_queue_posts') || [];
    document.getElementById('queue-count').textContent = queue.length;
}

function updatePublishedCount() {
    const published = getFromStorage('threads_published_posts') || [];
    document.getElementById('published-count').textContent = published.length;
}

function initializeStatsButtons() {
    const viewButtons = ['view-drafts', 'view-scheduled', 'view-queue', 'view-published'];
    
    viewButtons.forEach(buttonId => {
        const button = document.getElementById(buttonId);
        if (button) {
            button.addEventListener('click', function() {
                const type = buttonId.replace('view-', '');
                showContentList(type);
            });
        }
    });
}

function showContentList(type) {
    const typeNames = {
        'drafts': '–ß–µ—Ä–Ω–æ–≤–∏–∫–∏',
        'scheduled': '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ',
        'queue': '–í –æ—á–µ—Ä–µ–¥–∏',
        'published': '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ'
    };
    
    alert(`${typeNames[type]} (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)`);
}

// === –£–¢–ò–õ–ò–¢–´ –õ–û–ö–ê–õ–¨–ù–û–ì–û –•–†–ê–ù–ò–õ–ò–©–ê ===
function saveToStorage(key, data) {
    try {
        localStorage.setItem(key, JSON.stringify(data));
        console.log('Data saved to storage:', key);
    } catch (error) {
        console.error('Error saving to storage:', error);
    }
}

function getFromStorage(key) {
    try {
        const data = localStorage.getItem(key);
        return data ? JSON.parse(data) : null;
    } catch (error) {
        console.error('Error loading from storage:', error);
        return null;
    }
}

function removeFromStorage(key) {
    try {
        localStorage.removeItem(key);
        console.log('Data removed from storage:', key);
    } catch (error) {
        console.error('Error removing from storage:', error);
    }
}

// === –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
window.scheduleForTomorrow = scheduleForTomorrow;

// === –û–¢–õ–ê–î–ö–ê ===
console.log('Threads Create JavaScript loaded successfully');