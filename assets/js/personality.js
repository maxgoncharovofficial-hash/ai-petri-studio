// –ü—Ä–µ–º–∏—É–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π v30.42
// Personality Page JavaScript

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    console.log('Personality page loaded');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
    const backButton = document.getElementById('back-button');
    console.log('Back button found:', backButton);
    
            if (backButton) {
        backButton.addEventListener('click', function(e) {
            e.preventDefault();
            console.log('Back button clicked');
            window.location.href = '../index.html';
        });
        
        backButton.addEventListener('touchstart', function(e) {
            e.preventDefault();
            console.log('Back button touched');
            window.location.href = '../index.html';
        });
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    initializeSectionHandlers();
    

    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Å—á–µ—Ç—á–∏–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    updateAllSectionCounters();
    
    // –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const progress = recalculateExistingProgress();
    
    updateOverallProgress();
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    animateElements();
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Å–µ–∫—Ü–∏–π
function initializeSectionHandlers() {
    console.log('Initializing section handlers');
    
    const sections = document.querySelectorAll('.section-card');
    console.log('Found sections:', sections.length);
    
    sections.forEach(section => {
        console.log('Adding handlers for section:', section.id);
        
        section.addEventListener('click', function(e) {
            e.preventDefault();
            console.log('Section clicked:', this.id);
            const sectionId = this.id;
            handleSectionClick(sectionId);
        });
        
        section.addEventListener('touchstart', function(e) {
            e.preventDefault();
            console.log('Section touched:', this.id);
            this.style.transform = 'scale(0.98)';
        });
        
        section.addEventListener('touchend', function(e) {
            e.preventDefault();
            console.log('Section touch ended:', this.id);
            this.style.transform = '';
            const sectionId = this.id;
            handleSectionClick(sectionId);
        });
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ —Å–µ–∫—Ü–∏—è–º
function handleSectionClick(sectionId) {
    console.log('Handling section click:', sectionId);
    
    switch(sectionId) {
        case 'product-section':
            console.log('Calling handleProductSection');
            handleProductSection();
            break;
        case 'audience-section':
            console.log('Calling handleAudienceSection');
            handleAudienceSection();
            break;
        case 'cases-section':
            console.log('Calling handleCasesSection');
            handleCasesSection();
            break;
        case 'personality-lite-section':
            console.log('Calling handlePersonalityLiteSection');
            handlePersonalityLiteSection();
            break;
        case 'personality-pro-section':
            console.log('Calling handlePersonalityProSection');
            handlePersonalityProSection();
            break;
        default:
            console.log('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–µ–∫—Ü–∏—è:', sectionId);
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
function handleProductSection() {
    console.log('–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ clicked');
    window.location.href = 'product.html';
}

function handleAudienceSection() {
    console.log('–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ clicked');
    window.location.href = 'audience.html';
}

function handleCasesSection() {
    console.log('–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∫–µ–π—Å–æ–≤ clicked');
    window.location.href = 'cases.html';
}

function handlePersonalityLiteSection() {
    console.log('–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –ª–∏—á–Ω–æ—Å—Ç–∏ Lite clicked');
    window.location.href = 'personality-lite.html';
}

function handlePersonalityProSection() {
    console.log('–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –ª–∏—á–Ω–æ—Å—Ç–∏ Pro clicked');
    window.location.href = 'personality-pro.html';
}

// –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (–∑–∞–ø–∞—Å–Ω–∞—è)
function goBack() {
    console.log('Back button clicked (fallback)');
    window.location.href = '../index.html';
}

// –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
function animateElements() {
    const elements = document.querySelectorAll('.progress-section, .section-card, .advice-section');
    
    elements.forEach((element, index) => {
        element.style.opacity = '0';
        element.style.transform = 'translateY(20px)';
        
        setTimeout(() => {
            element.style.transition = 'all 0.5s ease';
            element.style.opacity = '1';
            element.style.transform = 'translateY(0)';
        }, index * 100);
    });
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
function countFilledFields(dataObject, fieldNames) {
    if (!dataObject || typeof dataObject !== 'object') {
        console.log('üîç countFilledFields: dataObject is empty or invalid');
        return 0;
    }
    
    console.log('üîç countFilledFields: dataObject =', dataObject);
    console.log('üîç countFilledFields: fieldNames =', fieldNames);
    
    let filledCount = 0;
    fieldNames.forEach(fieldName => {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–æ–ª—è
        if (fieldName === 'saved_at' || fieldName === 'timestamp') {
            console.log(`üîç Field "${fieldName}": SKIPPED (system field)`);
            return;
        }
        
        const value = dataObject[fieldName];
        const isFilled = value && value.trim() !== '';
        console.log(`üîç Field "${fieldName}": "${value}" -> ${isFilled ? 'FILLED' : 'EMPTY'}`);
        if (isFilled) {
            filledCount++;
        }
    });
    
    console.log(`üîç countFilledFields result: ${filledCount} –∏–∑ ${fieldNames.length}`);
    return filledCount;
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞
function updateSectionCounter(counterId, filled, total) {
    console.log(`üîß updateSectionCounter called: ${counterId} = [${filled}/${total}]`);
    const counterElement = document.getElementById(counterId);
    if (counterElement) {
        counterElement.textContent = `[${filled}/${total}]`;
        console.log(`‚úÖ Updated ${counterId}: [${filled}/${total}]`);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤
        if (counterId === 'product-counter' || counterId === 'audience-counter') {
            console.log(`üîç –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê ${counterId}:`);
            console.log(`üîç Element found:`, counterElement);
            console.log(`üîç Element textContent:`, counterElement.textContent);
            console.log(`üîç Element innerHTML:`, counterElement.innerHTML);
        }
    } else {
        console.error(`‚ùå Counter element not found: ${counterId}`);
        console.log(`üîç All elements with class section-counter:`, document.querySelectorAll('.section-counter'));
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –∫–µ–π—Å–æ–≤ (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–µ–π—Å–æ–≤)
function updateCasesCounter(counterId, casesCount) {
    const counterElement = document.getElementById(counterId);
    if (counterElement) {
        counterElement.textContent = casesCount.toString();
        console.log(`Updated ${counterId}: ${casesCount} cases`);
    } else {
        console.error(`Counter element not found: ${counterId}`);
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤ —Ä–∞–∑–¥–µ–ª–æ–≤
function updateAllSectionCounters() {
    console.log('üîÑ === –û–ë–ù–û–í–õ–ï–ù–ò–ï –í–°–ï–• –°–ß–ï–¢–ß–ò–ö–û–í ===');
    
    let totalFilled = 0;
    const progressResults = {};
    
    // –ü—Ä–æ–¥—É–∫—Ç (4 –ø–æ–ª—è)
    try {
        console.log('üì¶ === –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–†–û–î–£–ö–¢–ê ===');
        const productData = JSON.parse(localStorage.getItem('product_data') || '{}');
        console.log('üì¶ Raw product data:', productData);
        const productFields = ['main_product', 'advantages', 'values', 'freebies'];
        console.log('üì¶ Checking fields:', productFields);
        const productFilled = countFilledFields(productData, productFields);
        console.log('üì¶ Filled count:', productFilled);
        updateSectionCounter('product-counter', productFilled, 4);
        console.log('üì¶ Called updateSectionCounter(product-counter,', productFilled, ', 4)');
        progressResults.product = `${productFilled}/4`;
        totalFilled += productFilled;
        console.log('‚úÖ –ü—Ä–æ–¥—É–∫—Ç –∏—Ç–æ–≥:', productFilled, '/ 4');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞:', error);
        updateSectionCounter('product-counter', 0, 4);
        progressResults.product = '0/4';
    }
    
    // –ê—É–¥–∏—Ç–æ—Ä–∏—è (6 –ø–æ–ª–µ–π)
    try {
        console.log('üë• === –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ê–£–î–ò–¢–û–†–ò–ò ===');
        const audienceData = JSON.parse(localStorage.getItem('audience_data') || '{}');
        console.log('üë• Raw audience data:', audienceData);
        const audienceFields = ['age_location', 'family_status', 'interests', 'main_problems', 'solution_steps', 'your_solutions'];
        console.log('üë• Checking fields:', audienceFields);
        const audienceFilled = countFilledFields(audienceData, audienceFields);
        console.log('üë• Filled count:', audienceFilled);
        updateSectionCounter('audience-counter', audienceFilled, 6);
        console.log('üë• Called updateSectionCounter(audience-counter,', audienceFilled, ', 6)');
        progressResults.audience = `${audienceFilled}/6`;
        totalFilled += audienceFilled;
        console.log('‚úÖ –ê—É–¥–∏—Ç–æ—Ä–∏—è –∏—Ç–æ–≥:', audienceFilled, '/ 6');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏:', error);
        updateSectionCounter('audience-counter', 0, 6);
        progressResults.audience = '0/6';
    }
    
    // –õ–∏—á–Ω–æ—Å—Ç—å Lite (6 –ø–æ–ª–µ–π)
    try {
        console.log('üé≠ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—á–Ω–æ—Å—Ç—å Lite...');
        const liteData = JSON.parse(localStorage.getItem('personality_lite_data') || '{}');
        const liteFields = ['interesting_topics', 'frequent_questions', 'personal_experience', 'explain_to_beginner', 'transformation', 'communication_style'];
        const liteFilled = countFilledFields(liteData, liteFields);
        updateSectionCounter('lite-counter', liteFilled, 6);
        progressResults.personalityLite = `${liteFilled}/6`;
        totalFilled += liteFilled;
        console.log('‚úÖ –õ–∏—á–Ω–æ—Å—Ç—å Lite:', liteFilled, '/ 6');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –ª–∏—á–Ω–æ—Å—Ç–∏ Lite:', error);
        updateSectionCounter('lite-counter', 0, 6);
        progressResults.personalityLite = '0/6';
    }
    
    // –õ–∏—á–Ω–æ—Å—Ç—å Pro (5 –ø–æ–ª–µ–π)
    try {
        console.log('üë®‚Äçüíº –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—á–Ω–æ—Å—Ç—å Pro...');
        const proData = JSON.parse(localStorage.getItem('personality_pro_data') || '{}');
        const proFields = ['client_problem', 'unique_approach', 'common_mistakes', 'content_format', 'expert_mission'];
        const proFilled = countFilledFields(proData, proFields);
        updateSectionCounter('pro-counter', proFilled, 5);
        progressResults.personalityPro = `${proFilled}/5`;
        totalFilled += proFilled;
        console.log('‚úÖ –õ–∏—á–Ω–æ—Å—Ç—å Pro:', proFilled, '/ 5');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –ª–∏—á–Ω–æ—Å—Ç–∏ Pro:', error);
        updateSectionCounter('pro-counter', 0, 5);
        progressResults.personalityPro = '0/5';
    }
    
    // –ö–µ–π—Å—ã (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
    try {
        console.log('üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ–π—Å—ã...');
        const casesData = JSON.parse(localStorage.getItem('cases') || '[]');
        const casesCount = Array.isArray(casesData) ? casesData.length : 0;
        updateCasesCounter('cases-counter', casesCount);
        progressResults.cases = `${casesCount} –∫–µ–π—Å–æ–≤`;
        console.log('‚úÖ –ö–µ–π—Å—ã:', casesCount, '—à—Ç.');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –∫–µ–π—Å–æ–≤:', error);
        updateCasesCounter('cases-counter', 0);
        progressResults.cases = '0 –∫–µ–π—Å–æ–≤';
    }
    
    // –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å (21 –ø–æ–ª–µ –º–∞–∫—Å–∏–º—É–º)
    const totalMaxFields = 21; // 4 + 6 + 6 + 5 = 21
    const percentage = Math.round((totalFilled / totalMaxFields) * 100);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏
    updateGlobalProgress(totalFilled, totalMaxFields, percentage);
    
    console.log('üìä === –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===');
    console.log('üì¶ –ü—Ä–æ–¥—É–∫—Ç:', progressResults.product);
    console.log('üë• –ê—É–¥–∏—Ç–æ—Ä–∏—è:', progressResults.audience);
    console.log('üé≠ –õ–∏—á–Ω–æ—Å—Ç—å Lite:', progressResults.personalityLite);
    console.log('üë®‚Äçüíº –õ–∏—á–Ω–æ—Å—Ç—å Pro:', progressResults.personalityPro);
    console.log('üìã –ö–µ–π—Å—ã:', progressResults.cases);
    console.log('üßÆ === –ü–û–î–†–û–ë–ù–´–ô –ü–û–î–°–ß–ï–¢ ===');
    console.log('üßÆ totalFilled =', totalFilled);
    console.log('üßÆ totalMaxFields =', totalMaxFields);
    console.log('üßÆ percentage =', percentage);
    console.log('üßÆ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞: ', totalFilled, '/', totalMaxFields, '=', Math.round((totalFilled / totalMaxFields) * 100), '%');
    console.log('üéØ –ò–¢–û–ì–û:', totalFilled, '/', totalMaxFields, '(', percentage, '%)');
    console.log('‚úÖ –í—Å–µ —Å—á–µ—Ç—á–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function updateGlobalProgress(filled, total, percentage) {
    console.log('üéØ –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å:', filled, '/', total, '(', percentage, '%)');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å—á–µ—Ç—á–∏–∫–∞
    const parametersElement = document.querySelector('[data-parameters-count]');
    if (parametersElement) {
        parametersElement.textContent = `${filled}/21 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤`;
        console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Å—á–µ—Ç—á–∏–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:', `${filled}/21 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤`);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    const percentageElement = document.querySelector('[data-readiness-percent]');
    if (percentageElement) {
        percentageElement.textContent = `${percentage}%`;
        console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ü–µ–Ω—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:', `${percentage}%`);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    const progressBar = document.querySelector('[data-progress-bar]');
    if (progressBar) {
        progressBar.style.width = `${percentage}%`;
        console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä:', `${percentage}%`);
    }
}

// –°–ª—É–∂–µ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
function clearAllData() {
    // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–ª—é—á–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    const keysToRemove = [
        // –î–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–æ–≤
        'product-data', 'productData', 'product',
        'audience-data', 'audienceData', 'audience',
        'personality-lite-data', 'personalityLiteData', 'personality-lite',
        'personality-pro-data', 'personalityProData', 'personality-pro',
        
        // –î–∞–Ω–Ω—ã–µ –∫–µ–π—Å–æ–≤
        'cases', 'cases-data', 'casesData',
        
        // –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ
        'progress', 'progressData', 'saved-progress'
    ];
    
    // –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–ª—é—á–∏
    keysToRemove.forEach(key => {
        if (localStorage.getItem(key)) {
            localStorage.removeItem(key);
        }
    });
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–ª—é—á–∏ —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
    for (let i = localStorage.length - 1; i >= 0; i--) {
        const key = localStorage.key(i);
        if (key && (
            key.includes('product') || 
            key.includes('audience') || 
            key.includes('personality') || 
            key.includes('cases') ||
            key.includes('progress')
        )) {
            localStorage.removeItem(key);
        }
    }
}

// –°–ª—É–∂–µ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤–æ –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–∞—Ö
function resetAllProgress() {
    // –°–±—Ä–æ—Å–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    const globalProgress = {
        answered: 0,
        total: 21,
        percentage: 0
    };
    
    updateGlobalProgressDisplay(globalProgress);
    
    // –°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏ –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
    updateSectionProgress('product', 0, 4);
    updateSectionProgress('audience', 0, 6);
    updateSectionProgress('personality-lite', 0, 6);
    updateSectionProgress('personality-pro', 0, 5);
    
    // –°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –∫–µ–π—Å–æ–≤
    updateCasesCount(0);
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function updateGlobalProgressDisplay(progress) {
    // –û–±–Ω–æ–≤–∏—Ç—å –≤–µ—Ä—Ö–Ω–∏–π –±–ª–æ–∫
    const parametersElement = document.querySelector('[data-parameters-count]');
    if (parametersElement) {
        parametersElement.textContent = `${progress.answered}/21 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤`;
    }
    
    const percentageElement = document.querySelector('[data-readiness-percent]');
    if (percentageElement) {
        percentageElement.textContent = `${progress.percentage}%`;
    }
    
    const progressBar = document.querySelector('[data-progress-bar]');
    if (progressBar) {
        progressBar.style.width = `${progress.percentage}%`;
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–∑–¥–µ–ª–∞
function updateSectionProgress(section, answered, total) {
    const sectionElement = document.querySelector(`[data-section="${section}"] [data-section-progress]`);
    if (sectionElement) {
        sectionElement.textContent = `[${answered}/${total}]`;
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –∫–µ–π—Å–æ–≤
function updateCasesCount(count) {
    const casesElement = document.querySelector('[data-cases-count]');
    if (casesElement) {
        casesElement.textContent = count;
    }
}

// –°–ª—É–∂–µ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Ñ–æ—Ä–º –Ω–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
function clearAllForms() {
    // –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ textarea –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const textareas = document.querySelectorAll('textarea');
    textareas.forEach(textarea => {
        textarea.value = '';
    });
    
    // –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ input –ø–æ–ª—è
    const inputs = document.querySelectorAll('input[type="text"], input[type="email"]');
    inputs.forEach(input => {
        input.value = '';
    });
}



// –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π –≤ –æ–±—ä–µ–∫—Ç–µ
function countNonEmptyFields(data) {
    let count = 0;
    
    if (typeof data === 'object' && data !== null) {
        for (let key in data) {
            const value = data[key];
            
            // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –ø–æ–ª–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ
            if (value !== null && 
                value !== undefined && 
                typeof value === 'string' && 
                value.trim().length > 0) {
                
                console.log('‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –ø–æ–ª–µ:', key, '=', value.substring(0, 50) + '...');
                count++;
            } else {
                console.log('‚ùå –ü—É—Å—Ç–æ–µ –ø–æ–ª–µ:', key, '=', value);
            }
        }
    }
    
    return count;
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
function countFilledFieldsOnPage(sectionName) {
    const textareas = document.querySelectorAll('textarea');
    let filledCount = 0;
    
    textareas.forEach(textarea => {
        if (textarea.value && textarea.value.trim().length > 0) {
            filledCount++;
        }
    });
    
    return filledCount;
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–∞–∑–Ω—ã—Ö –∫–ª—é—á–µ–π
function getFilledQuestionsCount(section, maxQuestions) {

    
    // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
    const possibleKeys = [
        section + '-data',
        section + '_data', 
        section + 'Data',
        section
    ];
    
    let filledCount = 0;
    let foundData = null;
    let foundKey = null;
    
    for (let key of possibleKeys) {
        const data = localStorage.getItem(key);
        if (data) {
            try {
                foundData = JSON.parse(data);
                foundKey = key;
                console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ –∫–ª—é—á–µ:', key);
                console.log('üìÑ –î–∞–Ω–Ω—ã–µ:', foundData);
                break;
            } catch (e) {
                console.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–ª—é—á–∞:', key);
            }
        }
    }
    
    if (foundData) {
        // –¢–û–ß–ù–û –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è
        filledCount = countNonEmptyFields(foundData);
        console.log('üìù –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π –Ω–∞–π–¥–µ–Ω–æ:', filledCount);
    } else {
        console.log('‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞:', section);
    }
    
    // –ù–ï –ø—Ä–µ–≤—ã—à–∞—Ç—å –º–∞–∫—Å–∏–º—É–º –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞
    const result = Math.min(filledCount, maxQuestions);
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è ' + section + ':', result + '/' + maxQuestions);
    
    return result;
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
function recalculateExistingProgress() {

    
    let totalAnswered = 0;
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–∂–¥—ã–π —Ä–∞–∑–¥–µ–ª –∏ –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è
    
    // 1. –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ (4 –≤–æ–ø—Ä–æ—Å–∞)
    const productAnswered = getFilledQuestionsCount('product', 4);
    console.log('üì¶ –ü—Ä–æ–¥—É–∫—Ç:', productAnswered + '/4');
    
    // 2. –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ (6 –≤–æ–ø—Ä–æ—Å–æ–≤)  
    const audienceAnswered = getFilledQuestionsCount('audience', 6);
    console.log('üë• –ê—É–¥–∏—Ç–æ—Ä–∏—è:', audienceAnswered + '/6');
    
    // 3. –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –ª–∏—á–Ω–æ—Å—Ç–∏ Lite (6 –≤–æ–ø—Ä–æ—Å–æ–≤)
    const personalityLiteAnswered = getFilledQuestionsCount('personality_lite', 6);
    console.log('üß† –õ–∏—á–Ω–æ—Å—Ç—å Lite:', personalityLiteAnswered + '/6');
    
    // 4. –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –ª–∏—á–Ω–æ—Å—Ç–∏ Pro (5 –≤–æ–ø—Ä–æ—Å–æ–≤)  
    const personalityProAnswered = getFilledQuestionsCount('personality_pro', 5);
    console.log('‚≠ê –õ–∏—á–Ω–æ—Å—Ç—å Pro:', personalityProAnswered + '/5');
    
    totalAnswered = productAnswered + audienceAnswered + personalityLiteAnswered + personalityProAnswered;
    
    console.log('üìä –ò—Ç–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ:', totalAnswered + '/21');
    console.log('üéØ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 16/21 (76%)');
    console.log('üí° –ü–æ–∫–∞–∑–∞–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö: 3+4+5+4=16');
    
    return {
        answered: totalAnswered,
        total: 21,
        percentage: Math.round((totalAnswered / 21) * 100)
    };
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–ë–ï–ó –∫–µ–π—Å–æ–≤)
function calculateGlobalProgress() {
    return recalculateExistingProgress();
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function updateOverallProgress() {
    console.log('Updating overall progress...');
    
    const progress = calculateGlobalProgress();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    const progressFill = document.getElementById('overall-progress-fill');
    const statValue = document.getElementById('overall-progress');
    const totalParams = document.getElementById('total-params');
    
    if (progressFill) {
        progressFill.style.width = progress.percentage + '%';
    }
    
    if (statValue) {
        statValue.textContent = progress.percentage + '%';
    }
    
    if (totalParams) {
        totalParams.textContent = `${progress.answered}/${progress.total} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤`;
    }
    
    console.log('Overall progress updated:', progress.answered, '/', progress.total, '(', progress.percentage, '%)');
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è)
function updateProgress(filledQuestions, totalQuestions) {
    const percentage = Math.round((filledQuestions / totalQuestions) * 100);
    const progressFill = document.querySelector('.progress-fill');
    const statValue = document.querySelector('.stat-value');
    
    if (progressFill) {
        progressFill.style.width = percentage + '%';
    }
    
    if (statValue) {
        statValue.textContent = filledQuestions + '/' + totalQuestions;
    }
}
