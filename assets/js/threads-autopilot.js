// Threads Autopilot Page JavaScript
// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–∏–ª–æ—Ç–æ–º –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è

// === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
document.addEventListener('DOMContentLoaded', function() {
    console.log('Threads Autopilot page loaded');
    
    initializeBackButton();
    initializeAutopilot();
    initializeNavigation();
    initializeTabs();
    initializeScheduleManager();
    initializePostsGenerator();
    initializeQueueManager();
    initializeControlButtons();
    loadAutopilotData();
    updateAIRequirements();
    updateQueueCount();
    updateTodayPosts();
});

// === –ö–ù–û–ü–ö–ê –ù–ê–ó–ê–î ===
function initializeBackButton() {
    const backButton = document.getElementById('back-button');
    if (backButton) {
        backButton.addEventListener('click', function() {
            window.location.href = 'threads.html';
        });
        
        backButton.addEventListener('touchstart', function(e) {
            e.preventDefault();
            window.location.href = 'threads.html';
        });
    }
}

// === –ù–ê–í–ò–ì–ê–¶–ò–Ø ===
function initializeNavigation() {
    const connectionButton = document.getElementById('go-to-connection');
    const createButton = document.getElementById('go-to-create');
    const personalityButton = document.getElementById('go-to-personality');
    const setupButton = document.getElementById('setup-autopilot');
    
    if (connectionButton) {
        connectionButton.addEventListener('click', function() {
            window.location.href = 'threads-connection.html';
        });
    }
    
    if (createButton) {
        createButton.addEventListener('click', function() {
            window.location.href = 'threads-create.html';
        });
    }
    
    if (personalityButton) {
        personalityButton.addEventListener('click', function() {
            window.location.href = 'personality.html';
        });
    }
    
    if (setupButton) {
        setupButton.addEventListener('click', function() {
            window.location.href = 'threads-connection.html';
        });
    }
}

// === –ê–í–¢–û–ü–ò–õ–û–¢ ===
function initializeAutopilot() {
    const pauseButton = document.getElementById('pause-autopilot');
    const skipButton = document.getElementById('skip-post');
    const createButton = document.getElementById('create-now');
    const calendarButton = document.getElementById('view-calendar');
    const editScheduleButton = document.getElementById('edit-schedule');
    
    if (pauseButton) {
        pauseButton.addEventListener('click', toggleAutopilot);
    }
    
    if (skipButton) {
        skipButton.addEventListener('click', skipNextPost);
    }
    
    if (createButton) {
        createButton.addEventListener('click', createPostNow);
    }
    
    if (calendarButton) {
        calendarButton.addEventListener('click', toggleCalendarView);
    }
    
    if (editScheduleButton) {
        editScheduleButton.addEventListener('click', openScheduleEditor);
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    initializeScheduleModal();
}

function loadAutopilotData() {
    const autopilotData = getFromStorage('threads_autopilot');
    const connectionData = getFromStorage('threads_connection');
    const scheduleData = getFromStorage('threads_schedule');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ –∞–≤—Ç–æ–ø–∏–ª–æ—Ç
    if (!connectionData?.connected || !scheduleData) {
        showSetupRequired();
        return;
    }
    
    showActiveAutopilot();
    updateAutopilotStatus();
    updateScheduleDisplay();
    updateQueueCount();
    updateStatistics();
}

function showSetupRequired() {
    document.getElementById('setup-required').style.display = 'block';
    document.getElementById('active-autopilot').style.display = 'none';
}

function showActiveAutopilot() {
    document.getElementById('setup-required').style.display = 'none';
    document.getElementById('active-autopilot').style.display = 'block';
}

function updateAutopilotStatus() {
    const autopilotData = getFromStorage('threads_autopilot');
    const connectionData = getFromStorage('threads_connection');
    const statusDot = document.getElementById('autopilot-dot');
    const statusText = document.getElementById('autopilot-status');
    const accountElement = document.getElementById('autopilot-account');
    const pauseButton = document.getElementById('pause-autopilot');
    
    if (autopilotData && autopilotData.active) {
        statusDot.textContent = 'üü¢';
        statusText.textContent = '–ê–∫—Ç–∏–≤–µ–Ω';
        if (pauseButton) {
            pauseButton.innerHTML = '‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–ø–∏–ª–æ—Ç';
            pauseButton.classList.remove('active');
        }
    } else {
        statusDot.textContent = 'üî¥';
        statusText.textContent = '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω';
        if (pauseButton) {
            pauseButton.innerHTML = '‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–ø–∏–ª–æ—Ç';
            pauseButton.classList.add('active');
        }
    }
    
    if (connectionData && connectionData.connected) {
        accountElement.textContent = `@${connectionData.username}`;
    } else {
        accountElement.textContent = '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω';
    }
}

function updateScheduleDisplay() {
    const scheduleData = getFromStorage('threads_schedule');
    const todayContainer = document.getElementById('today-posts');
    const tomorrowContainer = document.getElementById('tomorrow-posts');
    
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    if (todayContainer) {
        if (!scheduleData) {
            todayContainer.innerHTML = '<div class="post-item">–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ</div>';
        } else {
            const today = new Date();
            const todayPosts = generateDayPosts(today, scheduleData);
            todayContainer.innerHTML = todayPosts;
        }
    }
    
    if (tomorrowContainer) {
        if (!scheduleData) {
            tomorrowContainer.innerHTML = '<div class="post-item">–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ</div>';
        } else {
            const tomorrow = new Date();
            tomorrow.setDate(tomorrow.getDate() + 1);
            const tomorrowPosts = generateDayPosts(tomorrow, scheduleData);
            tomorrowContainer.innerHTML = tomorrowPosts;
        }
    }
}

function generateDayPosts(date, scheduleData) {
    const currentTime = new Date();
    let html = '';
    
    scheduleData.postingTimes.forEach((time, index) => {
        const [hours, minutes] = time.split(':').map(Number);
        const postTime = new Date(date);
        postTime.setHours(hours, minutes, 0, 0);
        
        let status = '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ';
        let content = '–ü–æ—Å—Ç –≥–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏';
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞
        if (date.toDateString() === currentTime.toDateString()) {
            if (postTime < currentTime) {
                status = '‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ';
                content = '–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω';
            } else {
                const timeDiff = postTime - currentTime;
                const hours = Math.floor(timeDiff / (1000 * 60 * 60));
                const minutes = Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60));
                
                if (hours > 0) {
                    content = `–ß–µ—Ä–µ–∑ ${hours}—á ${minutes}–º–∏–Ω`;
                } else {
                    content = `–ß–µ—Ä–µ–∑ ${minutes}–º–∏–Ω`;
                }
            }
        }
        
        html += `
            <div class="post-item">
                <span class="post-time">${time}</span>
                <span class="post-status">${status}</span>
                <span class="post-content">${content}</span>
            </div>
        `;
    });
    
    return html || '<div class="post-item">–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤</div>';
}

function updateQueueCount() {
    const queueElement = document.getElementById('queue-count');
    const queuePosts = getFromStorage('threads_queue_posts') || [];
    
    // –°—á–∏—Ç–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏
    queueElement.textContent = queuePosts.length;
}

function updateStatistics() {
    const publishedPosts = getFromStorage('threads_published_posts') || [];
    const scheduledPosts = getFromStorage('threads_scheduled_posts') || [];
    const queuePosts = getFromStorage('threads_queue_posts') || [];
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    document.getElementById('total-published').textContent = publishedPosts.length;
    
    // –ü–æ—Å—Ç—ã —Å–µ–≥–æ–¥–Ω—è
    const today = new Date().toDateString();
    const todayPublished = publishedPosts.filter(post => 
        new Date(post.publishedAt).toDateString() === today
    ).length;
    document.getElementById('today-published').textContent = todayPublished;
    
    // –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
    document.getElementById('scheduled-posts').textContent = scheduledPosts.length + queuePosts.length;
    
    // –£—Å–ø–µ—à–Ω–æ—Å—Ç—å (–∑–∞–≥–ª—É—à–∫–∞)
    document.getElementById('success-rate').textContent = '98%';
}

function toggleAutopilot() {
    const autopilotData = getFromStorage('threads_autopilot') || {};
    const wasActive = autopilotData.active;
    
    if (wasActive) {
        stopAutopilot();
    } else {
        startAutopilot();
    }
    
    updateAutopilotStatus();
    
    const action = !wasActive ? '–∑–∞–ø—É—â–µ–Ω' : '–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
    alert(`–ê–≤—Ç–æ–ø–∏–ª–æ—Ç ${action}`);
}

function skipNextPost() {
    alert('–°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω');
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –ø–æ—Å—Ç–∞
}

function createPostNow() {
    window.location.href = 'threads-create.html';
}

function toggleCalendarView() {
    const calendarSection = document.getElementById('calendar-section');
    if (calendarSection.style.display === 'none') {
        calendarSection.style.display = 'block';
        generatePublishingCalendar();
    } else {
        calendarSection.style.display = 'none';
    }
}

function generatePublishingCalendar() {
    const container = document.getElementById('publishing-calendar');
    // –ó–∞–≥–ª—É—à–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    container.innerHTML = `
        <div style="text-align: center; padding: 40px; color: #6c757d;">
            <div style="font-size: 48px; margin-bottom: 16px;">üìÖ</div>
            <div>–ö–∞–ª–µ–Ω–¥–∞—Ä—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π</div>
            <div style="font-size: 14px; margin-top: 8px;">–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</div>
        </div>
    `;
}

// === –ü–†–û–í–ï–†–ö–ê –¢–†–ï–ë–û–í–ê–ù–ò–ô –ò–ò ===
function updateAIRequirements() {
    const productData = getFromStorage('product_data');
    const audienceData = getFromStorage('audience_data');
    const liteData = getFromStorage('personality_lite_data');
    const proData = getFromStorage('personality_pro_data');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    updateRequirement('req-product', productData && Object.keys(productData).length > 1);
    updateRequirement('req-audience', audienceData && Object.keys(audienceData).length > 1);
    updateRequirement('req-style', liteData && Object.keys(liteData).length > 1);
    updateRequirement('req-expertise', proData && Object.keys(proData).length > 1);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ò–ò
    updateAIProgress();
}

function updateRequirement(elementId, isMet) {
    const element = document.getElementById(elementId);
    if (element) {
        const statusElement = element.querySelector('.req-status');
        statusElement.textContent = isMet ? '‚úÖ' : '‚ùå';
    }
}

function updateAIProgress() {
    const requirements = [
        getFromStorage('product_data'),
        getFromStorage('audience_data'),
        getFromStorage('personality_lite_data'),
        getFromStorage('personality_pro_data')
    ];
    
    const metCount = requirements.filter(req => req && Object.keys(req).length > 1).length;
    const progress = Math.round((metCount / requirements.length) * 100);
    
    document.getElementById('ai-progress-fill').style.width = `${progress}%`;
    document.getElementById('ai-progress-text').textContent = `${progress}%`;
}

function goToSection(section) {
    const routes = {
        'product': 'product.html',
        'audience': 'audience.html',
        'personality-lite': 'personality-lite.html',
        'personality-pro': 'personality-pro.html'
    };
    
    if (routes[section]) {
        window.location.href = routes[section];
    }
}

// === –£–¢–ò–õ–ò–¢–´ –õ–û–ö–ê–õ–¨–ù–û–ì–û –•–†–ê–ù–ò–õ–ò–©–ê ===
function saveToStorage(key, data) {
    try {
        localStorage.setItem(key, JSON.stringify(data));
        console.log('Data saved to storage:', key);
    } catch (error) {
        console.error('Error saving to storage:', error);
    }
}

function getFromStorage(key) {
    try {
        const data = localStorage.getItem(key);
        return data ? JSON.parse(data) : null;
    } catch (error) {
        console.error('Error loading from storage:', error);
        return null;
    }
}

// === –†–ï–î–ê–ö–¢–û–† –†–ê–°–ü–ò–°–ê–ù–ò–Ø ===
function openScheduleEditor() {
    const modal = document.getElementById('schedule-modal');
    if (modal) {
        modal.style.display = 'flex';
        loadCurrentSchedule();
    }
}

function closeScheduleEditor() {
    const modal = document.getElementById('schedule-modal');
    if (modal) {
        modal.style.display = 'none';
    }
}

function initializeScheduleModal() {
    const modal = document.getElementById('schedule-modal');
    const closeBtn = document.getElementById('close-schedule-modal');
    const cancelBtn = document.getElementById('cancel-schedule');
    const saveBtn = document.getElementById('save-schedule');
    
    if (closeBtn) {
        closeBtn.addEventListener('click', closeScheduleEditor);
    }
    
    if (cancelBtn) {
        cancelBtn.addEventListener('click', closeScheduleEditor);
    }
    
    if (saveBtn) {
        saveBtn.addEventListener('click', saveNewSchedule);
    }
    
    // –ö–ª–∏–∫ –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –µ–≥–æ
    if (modal) {
        modal.addEventListener('click', function(e) {
            if (e.target === modal) {
                closeScheduleEditor();
            }
        });
    }
    
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    const typeButtons = document.querySelectorAll('.type-button');
    typeButtons.forEach(button => {
        button.addEventListener('click', function() {
            typeButtons.forEach(btn => btn.classList.remove('active'));
            this.classList.add('active');
            
            const type = this.dataset.type;
            if (type === 'daily') {
                document.getElementById('daily-schedule').style.display = 'block';
                document.getElementById('custom-schedule').style.display = 'none';
            } else {
                document.getElementById('daily-schedule').style.display = 'none';
                document.getElementById('custom-schedule').style.display = 'block';
            }
        });
    });
    
    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å
    const dailyPostsInput = document.getElementById('daily-posts');
    if (dailyPostsInput) {
        dailyPostsInput.addEventListener('change', updateDailyTimeSlots);
    }
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    const addTimeBtn = document.getElementById('add-daily-time');
    if (addTimeBtn) {
        addTimeBtn.addEventListener('click', addTimeSlot);
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
    updateDailyTimeSlots();
}

function loadCurrentSchedule() {
    const scheduleData = getFromStorage('threads_schedule');
    if (scheduleData && scheduleData.postingTimes) {
        const dailyPostsInput = document.getElementById('daily-posts');
        if (dailyPostsInput) {
            dailyPostsInput.value = scheduleData.postingTimes.length;
            updateDailyTimeSlots();
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–∞
            setTimeout(() => {
                const timeSlots = document.querySelectorAll('.time-slot input[type="time"]');
                scheduleData.postingTimes.forEach((time, index) => {
                    if (timeSlots[index]) {
                        timeSlots[index].value = time;
                    }
                });
            }, 100);
        }
    }
}

function updateDailyTimeSlots() {
    const container = document.getElementById('daily-time-slots');
    const count = parseInt(document.getElementById('daily-posts').value) || 6;
    
    if (!container) return;
    
    container.innerHTML = '';
    
    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –¥–ª—è —Ä–∞–∑–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–æ–≤
    const defaultTimes = {
        1: ['12:00'],
        2: ['10:00', '16:00'],
        3: ['09:00', '13:00', '18:00'],
        4: ['09:00', '12:00', '15:00', '18:00'],
        5: ['09:00', '12:00', '15:00', '17:00', '19:00'],
        6: ['09:00', '13:00', '15:00', '16:00', '18:00', '19:00'],
        7: ['09:00', '11:00', '13:00', '15:00', '17:00', '18:00', '19:00'],
        8: ['09:00', '11:00', '13:00', '14:00', '15:00', '17:00', '18:00', '19:00'],
        9: ['09:00', '10:00', '12:00', '13:00', '15:00', '16:00', '17:00', '18:00', '19:00'],
        10: ['09:00', '10:00', '12:00', '13:00', '14:00', '15:00', '16:00', '17:00', '18:00', '19:00']
    };
    
    const times = defaultTimes[count] || defaultTimes[6];
    
    times.forEach((time, index) => {
        addTimeSlot(time);
    });
}

function addTimeSlot(defaultTime = '12:00') {
    const container = document.getElementById('daily-time-slots');
    if (!container) return;
    
    const timeSlot = document.createElement('div');
    timeSlot.className = 'time-slot';
    timeSlot.innerHTML = `
        <span>–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</span>
        <input type="time" value="${defaultTime}">
        <button class="remove-time" onclick="removeTimeSlot(this)">–£–¥–∞–ª–∏—Ç—å</button>
    `;
    
    container.appendChild(timeSlot);
}

function removeTimeSlot(button) {
    const timeSlot = button.closest('.time-slot');
    if (timeSlot) {
        timeSlot.remove();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å—Ç–æ–≤
        const count = document.querySelectorAll('.time-slot').length;
        document.getElementById('daily-posts').value = count;
    }
}

function saveNewSchedule() {
    const timeSlots = document.querySelectorAll('.time-slot input[type="time"]');
    const postingTimes = Array.from(timeSlots).map(input => input.value).filter(time => time);
    
    if (postingTimes.length === 0) {
        alert('‚ùå –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
        return;
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
    postingTimes.sort();
    
    const newScheduleData = {
        postsPerDay: postingTimes.length,
        startDate: new Date().toISOString(),
        postingTimes: postingTimes,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    saveToStorage('threads_schedule', newScheduleData);
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏
    clearOldScheduleLogs();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    updateScheduleDisplay();
    updateStatistics();
    updateQueueCount();
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    closeScheduleEditor();
    
    alert('‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!');
}

function clearOldScheduleLogs() {
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    localStorage.removeItem('threads_today_posts');
    localStorage.removeItem('threads_tomorrow_posts');
    localStorage.removeItem('threads_queue_posts');
    
    console.log('Old schedule logs cleared');
}

// === –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø ===

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π
 */
async function checkScheduledPosts() {
    const scheduleData = getFromStorage('threads_schedule');
    const connectionData = getFromStorage('threads_connection');
    
    if (!scheduleData || !connectionData?.connected) {
        console.log('No schedule or connection data available');
        return;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if (!window.threadsAPI.accessToken && connectionData.accessToken) {
        await window.ThreadsIntegration.initFromStorage();
    }

    const now = new Date();
    const currentTime = now.getHours().toString().padStart(2, '0') + ':' + now.getMinutes().toString().padStart(2, '0');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –≤—Ä–µ–º—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
    for (const scheduledTime of scheduleData.postingTimes) {
        if (shouldPostNow(scheduledTime, currentTime)) {
            await executeScheduledPost(scheduledTime);
        }
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç —Å–µ–π—á–∞—Å
 */
function shouldPostNow(scheduledTime, currentTime) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ (—Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ –º–∏–Ω—É—Ç—ã)
    return scheduledTime === currentTime;
}

/**
 * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
 */
async function executeScheduledPost(scheduledTime) {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        const postContent = await generatePostContent();
        
        if (!postContent) {
            console.warn(`No content available for post at ${scheduledTime}`);
            return;
        }

        // –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç
        const result = await window.ThreadsIntegration.publishScheduledPost({
            text: postContent.text,
            scheduledTime: scheduledTime,
            replyControl: postContent.replyControl || 'everyone'
        });

        if (result.success) {
            console.log(`Successfully published post at ${scheduledTime}:`, result.postId);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            updatePublishedCount();
            updateQueueCount();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            showPublicationNotification('success', `–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ ${scheduledTime}`, postContent.text);
        } else {
            console.error(`Failed to publish post at ${scheduledTime}:`, result.error);
            showPublicationNotification('error', `–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ ${scheduledTime}`, result.error);
        }

    } catch (error) {
        console.error('Error in executeScheduledPost:', error);
        showPublicationNotification('error', '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–∏–ª–æ—Ç–∞', error.message);
    }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
 */
async function generatePostContent() {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –≥–æ—Ç–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤
    const queuedPosts = getFromStorage('threads_queue_posts') || [];
    
    if (queuedPosts.length > 0) {
        const post = queuedPosts.shift();
        saveToStorage('threads_queue_posts', queuedPosts);
        return post;
    }

    // –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥–∏ –Ω–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return await generateContentFromUserData();
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function generateContentFromUserData() {
    const productData = getFromStorage('product_data');
    const audienceData = getFromStorage('audience_data');
    const personalityData = getFromStorage('personality_lite_data') || getFromStorage('personality_pro_data');

    if (!productData && !audienceData && !personalityData) {
        return {
            text: "üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Å—Ç –æ—Ç AiPetri Studio! –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ '–õ–∏—á–Ω–æ—Å—Ç—å' –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π.",
            replyControl: 'everyone'
        };
    }

    // –ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
    const templates = [
        "üí° {insight} - —á—Ç–æ –¥—É–º–∞–µ—Ç–µ?",
        "üéØ –°–µ–≥–æ–¥–Ω—è —Ñ–æ–∫—É—Å–∏—Ä—É—é—Å—å –Ω–∞ {focus}",
        "üìà {tip} - –¥–µ–ª–∏—Ç–µ—Å—å –æ–ø—ã—Ç–æ–º!",
        "üî• {question}",
        "‚ú® {inspiration}"
    ];

    const insights = [
        "–ö–∞—á–µ—Å—Ç–≤–æ –≤–∞–∂–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞",
        "–ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ - –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É", 
        "–ò–Ω–Ω–æ–≤–∞—Ü–∏–∏ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –≤–æ–ø—Ä–æ—Å–æ–≤",
        "–°–æ–æ–±—â–µ—Å—Ç–≤–æ —Å–∏–ª—å–Ω–µ–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ—Å—Ç–∏"
    ];

    const focuses = [
        "—Ä–æ—Å—Ç–µ –∏ —Ä–∞–∑–≤–∏—Ç–∏–∏",
        "—Å–æ–∑–¥–∞–Ω–∏–∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏",
        "–ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ —Å–≤—è–∑–µ–π",
        "–∏–∑—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ"
    ];

    const tips = [
        "–õ—É—á—à–µ —Å–¥–µ–ª–∞—Ç—å –º–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥, —á–µ–º —Å—Ç–æ—è—Ç—å –Ω–∞ –º–µ—Å—Ç–µ",
        "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å - –ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è —Ä–æ—Å—Ç–∞",
        "–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"
    ];

    const questions = [
        "–ß—Ç–æ –≤–∞—Å –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å, –∫–æ–≥–¥–∞ —Å–ª–æ–∂–Ω–æ?",
        "–ö–∞–∫–æ–π –æ–¥–∏–Ω —Å–æ–≤–µ—Ç –∏–∑–º–µ–Ω–∏–ª –≤–∞—à—É –∂–∏–∑–Ω—å?",
        "–ß—Ç–æ –¥–ª—è –≤–∞—Å –∑–Ω–∞—á–∏—Ç —É—Å–ø–µ—Ö?"
    ];

    const inspirations = [
        "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å - –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—å –ª—É—á—à–µ",
        "–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ–ø—ã—Ç –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –¥—Ä—É–≥–∏–º",
        "–ú–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –≤–µ–¥—É—Ç –∫ –±–æ–ª—å—à–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º"
    ];

    const contentSets = { insights, focuses, tips, questions, inspirations };
    
    const template = templates[Math.floor(Math.random() * templates.length)];
    let content = template;

    // –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    Object.keys(contentSets).forEach(key => {
        const placeholder = `{${key.slice(0, -1)}}`;
        if (content.includes(placeholder)) {
            const items = contentSets[key];
            const randomItem = items[Math.floor(Math.random() * items.length)];
            content = content.replace(placeholder, randomItem);
        }
    });

    return {
        text: content,
        replyControl: 'everyone'
    };
}

/**
 * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
 */
function showPublicationNotification(type, title, message) {
    // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã
    if ('Notification' in window && Notification.permission === 'granted') {
        new Notification(title, {
            body: message.substring(0, 100) + (message.length > 100 ? '...' : ''),
            icon: '/favicon.ico'
        });
    }
    
    // –¢–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
    console.log(`${type.toUpperCase()}: ${title} - ${message}`);
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
 */
function updatePublishedCount() {
    const publishedPosts = getFromStorage('threads_published_posts') || [];
    const today = new Date().toDateString();
    const todayPublished = publishedPosts.filter(post => 
        new Date(post.publishedAt).toDateString() === today
    ).length;
    
    const element = document.getElementById('today-published');
    if (element) {
        element.textContent = todayPublished;
    }
}

/**
 * –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–ø–∏–ª–æ—Ç–∞
 */
function startAutopilot() {
    const autopilotData = getFromStorage('threads_autopilot') || {};
    autopilotData.active = true;
    autopilotData.startedAt = new Date().toISOString();
    
    saveToStorage('threads_autopilot', autopilotData);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å—Ç—ã –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    if (window.autopilotInterval) {
        clearInterval(window.autopilotInterval);
    }
    
    window.autopilotInterval = setInterval(checkScheduledPosts, 60000); // –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    
    console.log('Autopilot started');
}

/**
 * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–ø–∏–ª–æ—Ç–∞
 */
function stopAutopilot() {
    const autopilotData = getFromStorage('threads_autopilot') || {};
    autopilotData.active = false;
    autopilotData.stoppedAt = new Date().toISOString();
    
    saveToStorage('threads_autopilot', autopilotData);
    
    if (window.autopilotInterval) {
        clearInterval(window.autopilotInterval);
        window.autopilotInterval = null;
    }
    
    console.log('Autopilot stopped');
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ–ø–∏–ª–æ—Ç–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    setTimeout(() => {
        const autopilotData = getFromStorage('threads_autopilot');
        if (autopilotData?.active) {
            startAutopilot();
        }
    }, 2000); // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if ('Notification' in window && Notification.permission === 'default') {
        Notification.requestPermission();
    }
});

// === –¢–ê–ë–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê ===
function initializeTabs() {
    const tabButtons = document.querySelectorAll('.tab-button');
    const tabContents = document.querySelectorAll('.tab-content');
    
    tabButtons.forEach(button => {
        button.addEventListener('click', function() {
            const targetTab = this.dataset.tab;
            
            // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            tabButtons.forEach(btn => btn.classList.remove('active'));
            tabContents.forEach(content => content.classList.remove('active'));
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ —Ç–µ–∫—É—â–µ–π –∫–Ω–æ–ø–∫–µ
            this.classList.add('active');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
            const targetContent = document.getElementById(`tab-${targetTab}`);
            if (targetContent) {
                targetContent.classList.add('active');
            }
        });
    });
}

// === –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–°–ü–ò–°–ê–ù–ò–ï–ú ===
function initializeScheduleManager() {
    // –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–æ–≤
    const countButtons = document.querySelectorAll('.count-btn');
    countButtons.forEach(button => {
        button.addEventListener('click', function() {
            countButtons.forEach(btn => btn.classList.remove('active'));
            this.classList.add('active');
            
            const count = parseInt(this.dataset.count);
            generateSchedulePreview(count);
        });
    });
    
    // –ö–Ω–æ–ø–∫–∏ —Ä–µ–∂–∏–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
    const distButtons = document.querySelectorAll('.dist-btn');
    distButtons.forEach(button => {
        button.addEventListener('click', function() {
            distButtons.forEach(btn => btn.classList.remove('active'));
            this.classList.add('active');
            
            const mode = this.dataset.mode;
            const count = getSelectedPostsCount();
            generateSchedulePreview(count, mode);
            
            // –£–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å—é –∫–Ω–æ–ø–∫–∏ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            const regenerateBtn = document.getElementById('regenerate-schedule');
            if (regenerateBtn) {
                if (mode === 'random') {
                    regenerateBtn.style.display = 'inline-block';
                } else {
                    regenerateBtn.style.display = 'none';
                }
            }
        });
    });
    
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    const customCountInput = document.getElementById('custom-count');
    if (customCountInput) {
        customCountInput.addEventListener('input', function() {
            const count = parseInt(this.value);
            if (count >= 1 && count <= 10) {
                countButtons.forEach(btn => btn.classList.remove('active'));
                generateSchedulePreview(count);
            }
        });
    }
    
    // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    const regenerateBtn = document.getElementById('regenerate-schedule');
    const applyBtn = document.getElementById('apply-schedule');
    
    if (regenerateBtn) {
        regenerateBtn.addEventListener('click', function() {
            const count = getSelectedPostsCount();
            const mode = getSelectedDistributionMode();
            generateSchedulePreview(count, mode);
        });
    }
    
    if (applyBtn) {
        applyBtn.addEventListener('click', applySchedule);
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    generateSchedulePreview(6);
}

function getSelectedPostsCount() {
    const activeButton = document.querySelector('.count-btn.active');
    if (activeButton) {
        return parseInt(activeButton.dataset.count);
    }
    
    const customInput = document.getElementById('custom-count');
    if (customInput && customInput.value) {
        return parseInt(customInput.value);
    }
    
    return 6; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
}

function getSelectedDistributionMode() {
    const activeButton = document.querySelector('.dist-btn.active');
    return activeButton ? activeButton.dataset.mode : 'auto';
}

function generateSchedulePreview(count, mode = 'auto') {
    const preview = document.getElementById('schedule-preview');
    if (!preview) return;
    
    if (mode === 'manual') {
        // –î–ª—è —Ä—É—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏
        let html = `
            <h5>–†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ (${count} ${count === 1 ? '–ø–æ—Å—Ç' : count < 5 ? '–ø–æ—Å—Ç–∞' : '–ø–æ—Å—Ç–æ–≤'} –≤ –¥–µ–Ω—å):</h5>
            <div class="manual-time-inputs">
        `;
        
        for (let i = 0; i < count; i++) {
            html += `
                <div class="time-input-row">
                    <label>–ü–æ—Å—Ç ${i + 1}:</label>
                    <input type="time" class="manual-time-input" data-index="${i}" value="09:00">
                </div>
            `;
        }
        
        html += `
            </div>
            <p style="margin-top: 16px; color: #6c757d; font-size: 14px;">
                –†–µ–∂–∏–º: ${getModeDisplayName(mode)} | –£–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞
            </p>
        `;
        
        preview.innerHTML = html;
        return;
    }
    
    const times = generatePostingTimes(count, mode);
    
    let html = `
        <h5>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (${count} ${count === 1 ? '–ø–æ—Å—Ç' : count < 5 ? '–ø–æ—Å—Ç–∞' : '–ø–æ—Å—Ç–æ–≤'} –≤ –¥–µ–Ω—å):</h5>
        <table class="schedule-table">
            <thead>
                <tr>
                    <th>‚Ññ</th>
                    <th>–í—Ä–µ–º—è</th>
                    <th>–°—Ç–∞—Ç—É—Å</th>
                </tr>
            </thead>
            <tbody>
    `;
    
    times.forEach((time, index) => {
        html += `
            <tr>
                <td>${index + 1}</td>
                <td class="schedule-time">${time}</td>
                <td><span style="color: #28a745;">üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ</span></td>
            </tr>
        `;
    });
    
    html += `
            </tbody>
        </table>
        <p style="margin-top: 16px; color: #6c757d; font-size: 14px;">
            –†–µ–∂–∏–º: ${getModeDisplayName(mode)} | 
            –ò–Ω—Ç–µ—Ä–≤–∞–ª: ${calculateInterval(times)} | 
            –ü–µ—Ä–∏–æ–¥: —Å ${times[0]} –¥–æ ${times[times.length - 1]}
        </p>
    `;
    
    preview.innerHTML = html;
}

function generatePostingTimes(count, mode = 'auto') {
    const times = [];
    
    switch (mode) {
        case 'auto':
            // –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è
            const optimalTimes = {
                1: ['14:00'],
                2: ['10:00', '16:00'],
                3: ['09:00', '13:00', '18:00'],
                4: ['09:00', '12:00', '15:00', '18:00'],
                5: ['09:00', '12:00', '15:00', '17:00', '19:00'],
                6: ['09:00', '11:00', '13:00', '15:00', '17:00', '19:00'],
                7: ['09:00', '10:30', '12:00', '14:00', '16:00', '17:30', '19:00'],
                8: ['09:00', '10:00', '11:30', '13:00', '14:30', '16:00', '17:30', '19:00'],
                9: ['09:00', '10:00', '11:00', '12:30', '14:00', '15:30', '17:00', '18:00', '19:00'],
                10: ['09:00', '10:00', '11:00', '12:00', '13:30', '15:00', '16:00', '17:00', '18:00', '19:00']
            };
            return optimalTimes[count] || optimalTimes[6];
            
        case 'random':
            // –°–ª—É—á–∞–π–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            const startHour = 9;
            const endHour = 19;
            const availableHours = [];
            
            for (let hour = startHour; hour <= endHour; hour++) {
                for (let minute = 0; minute < 60; minute += 30) {
                    availableHours.push(`${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`);
                }
            }
            
            // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏ –±–µ—Ä–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            const shuffled = availableHours.sort(() => 0.5 - Math.random());
            return shuffled.slice(0, count).sort();
            
        case 'manual':
        default:
            // –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            const start = 9 * 60; // 9:00 –≤ –º–∏–Ω—É—Ç–∞—Ö
            const end = 19 * 60;  // 19:00 –≤ –º–∏–Ω—É—Ç–∞—Ö
            const interval = (end - start) / (count - 1);
            
            for (let i = 0; i < count; i++) {
                const totalMinutes = start + (interval * i);
                const hours = Math.floor(totalMinutes / 60);
                const minutes = Math.round(totalMinutes % 60);
                times.push(`${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`);
            }
            return times;
    }
}

function getModeDisplayName(mode) {
    const modes = {
        'auto': 'ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π (–æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π)',
        'manual': '‚úã –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ',
        'random': 'üé≤ –°–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è'
    };
    return modes[mode] || mode;
}

function calculateInterval(times) {
    if (times.length < 2) return 'N/A';
    
    const first = timeToMinutes(times[0]);
    const last = timeToMinutes(times[times.length - 1]);
    const totalMinutes = last - first;
    const intervals = times.length - 1;
    const avgInterval = Math.round(totalMinutes / intervals);
    
    const hours = Math.floor(avgInterval / 60);
    const minutes = avgInterval % 60;
    
    if (hours > 0) {
        return `‚âà${hours}—á ${minutes}–º–∏–Ω`;
    } else {
        return `‚âà${minutes}–º–∏–Ω`;
    }
}

function timeToMinutes(timeStr) {
    const [hours, minutes] = timeStr.split(':').map(Number);
    return hours * 60 + minutes;
}

function applySchedule() {
    const count = getSelectedPostsCount();
    const mode = getSelectedDistributionMode();
    
    let times;
    
    if (mode === 'manual') {
        // –î–ª—è —Ä—É—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Å–æ–±–∏—Ä–∞–µ–º –≤—Ä–µ–º–µ–Ω–∞ –∏–∑ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
        const timeInputs = document.querySelectorAll('.manual-time-input');
        times = Array.from(timeInputs).map(input => input.value).sort();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
        if (times.some(time => !time)) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤');
            return;
        }
    } else {
        times = generatePostingTimes(count, mode);
    }
    
    const scheduleData = {
        postsPerDay: count,
        startDate: new Date().toISOString(),
        postingTimes: times,
        distributionMode: mode,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    saveToStorage('threads_schedule', scheduleData);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    updateScheduleDisplay();
    updateQueueCount();
    updateTodayPosts(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤
    
    alert(`‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ! ${count} ${count === 1 ? '–ø–æ—Å—Ç' : count < 5 ? '–ø–æ—Å—Ç–∞' : '–ø–æ—Å—Ç–æ–≤'} –≤ –¥–µ–Ω—å.`);
}

// === –ì–ï–ù–ï–†–ê–¢–û–† –ü–û–°–¢–û–í ===
function initializePostsGenerator() {
    // –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    const generateBtn = document.getElementById('generate-posts');
    if (generateBtn) {
        generateBtn.addEventListener('click', generatePosts);
    }
}

async function generatePosts() {
    const generateBtn = document.getElementById('generate-posts');
    const countSelect = document.getElementById('generate-count');
    const postsContainer = document.getElementById('generated-posts');
    
    const count = parseInt(countSelect.value) || 5;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ OpenAI
    if (!window.openAIService || !window.openAIService.isServiceConnected()) {
        alert('‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ OpenAI –≤ —Ä–∞–∑–¥–µ–ª–µ "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"');
        return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    generateBtn.textContent = 'üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å –ò–ò...';
    generateBtn.disabled = true;
    
    try {
        const posts = [];
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        const userData = {
            product: getFromStorage('product_data'),
            audience: getFromStorage('audience_data'),
            personality: getFromStorage('personality_data')
        };
        
        for (let i = 0; i < count; i++) {
            try {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenAI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                const result = await window.openAIService.generatePost(null, userData);
                
                if (result.success) {
                    posts.push({
                        id: Date.now() + i,
                        text: result.text,
                        source: 'openai',
                        createdAt: new Date().toISOString()
                    });
                } else {
                    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç');
                }
                
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                if (i < count - 1) {
                    await new Promise(resolve => setTimeout(resolve, 500));
                }
                
            } catch (error) {
                console.warn(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ ${i + 1}:`, error);
                // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
                const fallbackContent = await generateContentFromUserData('mixed');
                posts.push({
                    id: Date.now() + i,
                    text: fallbackContent.text,
                    source: 'fallback',
                    createdAt: new Date().toISOString()
                });
            }
        }
        
        displayGeneratedPosts(posts);
        
    } catch (error) {
        alert('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ' + error.message);
    }
    
    generateBtn.textContent = 'üßµ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å Threads';
    generateBtn.disabled = false;
}

function displayGeneratedPosts(posts) {
    const container = document.getElementById('generated-posts');
    if (!container) return;
    
    container.style.display = 'block';
    
    let html = `<h5>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã (${posts.length}):</h5>`;
    
    posts.forEach((post, index) => {
        html += `
            <div class="generated-post" data-post-id="${post.id}">
                <div class="post-text">${post.text}</div>
                <div class="post-actions">
                    <button class="post-action-btn edit" onclick="editPost(${post.id})">‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å</button>
                    <button class="post-action-btn queue" onclick="addPostToQueue(${post.id})">‚ûï –í –æ—á–µ—Ä–µ–¥—å</button>
                    <button class="post-action-btn delete" onclick="deleteGeneratedPost(${post.id})">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
                </div>
            </div>
        `;
    });
    
    container.innerHTML = html;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
    saveToStorage('generated_posts', posts);
}

// === –£–ü–†–ê–í–õ–ï–ù–ò–ï –û–ß–ï–†–ï–î–¨–Æ ===
function initializeQueueManager() {
    const clearBtn = document.getElementById('clear-queue');
    const addBtn = document.getElementById('add-to-queue');
    
    if (clearBtn) {
        clearBtn.addEventListener('click', clearQueue);
    }
    
    if (addBtn) {
        addBtn.addEventListener('click', addManualPost);
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—á–µ—Ä–µ–¥—å
    displayQueue();
}

function displayQueue() {
    const container = document.getElementById('queue-list');
    const queuePosts = getFromStorage('threads_queue_posts') || [];
    
    if (!container) return;
    
    if (queuePosts.length === 0) {
        container.innerHTML = `
            <div style="text-align: center; color: #6c757d; padding: 40px;">
                <p>üìù –û—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π –ø—É—Å—Ç–∞</p>
                <p>–î–æ–±–∞–≤—å—Ç–µ –ø–æ—Å—Ç—ã —á–µ—Ä–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–ª–∏ –≤—Ä—É—á–Ω—É—é</p>
            </div>
        `;
        return;
    }
    
    let html = '';
    queuePosts.forEach((post, index) => {
        html += `
            <div class="queue-item" data-post-id="${post.id}">
                <div class="queue-number">${index + 1}</div>
                <div class="queue-content">${post.text}</div>
                <div class="queue-actions">
                    <button class="queue-action-btn publish-now" onclick="publishPostNow(${post.id})">üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å</button>
                    <button class="queue-action-btn edit" onclick="editQueuePost(${post.id})">‚úèÔ∏è</button>
                    <button class="queue-action-btn move-up" onclick="moveQueuePost(${post.id}, 'up')" ${index === 0 ? 'disabled' : ''}>‚Üë</button>
                    <button class="queue-action-btn move-down" onclick="moveQueuePost(${post.id}, 'down')" ${index === queuePosts.length - 1 ? 'disabled' : ''}>‚Üì</button>
                    <button class="queue-action-btn delete" onclick="deleteQueuePost(${post.id})">üóëÔ∏è</button>
                </div>
            </div>
        `;
    });
    
    container.innerHTML = html;
}

function clearQueue() {
    if (confirm('–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –æ—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π?')) {
        saveToStorage('threads_queue_posts', []);
        displayQueue();
        updateQueueCount();
    }
}

function addManualPost() {
    const text = prompt('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:');
    if (text && text.trim()) {
        const queuePosts = getFromStorage('threads_queue_posts') || [];
        queuePosts.push({
            id: Date.now(),
            text: text.trim(),
            addedAt: new Date().toISOString()
        });
        
        saveToStorage('threads_queue_posts', queuePosts);
        displayQueue();
        updateQueueCount();
    }
}

// === –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø ONCLICK ===
window.editPost = function(postId) {
    const posts = getFromStorage('generated_posts') || [];
    const post = posts.find(p => p.id === postId);
    if (post) {
        const newText = prompt('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:', post.text);
        if (newText !== null) {
            post.text = newText;
            saveToStorage('generated_posts', posts);
            displayGeneratedPosts(posts);
        }
    }
};

window.addPostToQueue = function(postId) {
    const posts = getFromStorage('generated_posts') || [];
    const post = posts.find(p => p.id === postId);
    if (post) {
        const queuePosts = getFromStorage('threads_queue_posts') || [];
        queuePosts.push({
            id: Date.now(),
            text: post.text,
            addedAt: new Date().toISOString()
        });
        
        saveToStorage('threads_queue_posts', queuePosts);
        displayQueue();
        updateQueueCount();
        alert('–ü–æ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å!');
    }
};

window.deleteGeneratedPost = function(postId) {
    const posts = getFromStorage('generated_posts') || [];
    const filtered = posts.filter(p => p.id !== postId);
    saveToStorage('generated_posts', filtered);
    displayGeneratedPosts(filtered);
};

window.editQueuePost = function(postId) {
    const queuePosts = getFromStorage('threads_queue_posts') || [];
    const post = queuePosts.find(p => p.id === postId);
    if (post) {
        const newText = prompt('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:', post.text);
        if (newText !== null) {
            post.text = newText;
            saveToStorage('threads_queue_posts', queuePosts);
            displayQueue();
        }
    }
};

window.deleteQueuePost = function(postId) {
    const queuePosts = getFromStorage('threads_queue_posts') || [];
    const filtered = queuePosts.filter(p => p.id !== postId);
    saveToStorage('threads_queue_posts', filtered);
    displayQueue();
    updateQueueCount();
};

window.publishPostNow = async function(postId) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Threads API
        const connectionData = getFromStorage('threads_connection');
        if (!connectionData || !connectionData.connected || !connectionData.accessToken) {
            alert('‚ùå Threads API –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ" –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ API.');
            return;
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API –µ—Å–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        if (!window.threadsAPI || !window.threadsAPI.accessToken) {
            if (window.threadsAPI) {
                await window.threadsAPI.initialize(connectionData.accessToken);
            } else {
                alert('‚ùå Threads API –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
                return;
            }
        }
        
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å—Ç –≤ –æ—á–µ—Ä–µ–¥–∏
        const queuePosts = getFromStorage('threads_queue_posts') || [];
        const post = queuePosts.find(p => p.id === postId);
        
        if (!post) {
            alert('‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏');
            return;
        }
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        if (!confirm(`–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç —Å–µ–π—á–∞—Å?\n\n"${post.text.substring(0, 100)}..."`)) {
            return;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        const button = document.querySelector(`[onclick="publishPostNow(${postId})"]`);
        if (button) {
            button.textContent = '‚è≥ –ü—É–±–ª–∏–∫—É–µ–º...';
            button.disabled = true;
        }
        
        // –ü—É–±–ª–∏–∫—É–µ–º —á–µ—Ä–µ–∑ Threads API
        const result = await window.threadsAPI.createTextPost(post.text);
        
        if (result.success) {
            // –£–¥–∞–ª—è–µ–º –ø–æ—Å—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            const updatedQueue = queuePosts.filter(p => p.id !== postId);
            saveToStorage('threads_queue_posts', updatedQueue);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
            updatePublishedCount();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            showPublicationNotification('success', `‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω! ID: ${result.postId}`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            displayQueue();
            updateQueueCount();
            
        } else {
            throw new Error(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:', error);
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        const button = document.querySelector(`[onclick="publishPostNow(${postId})"]`);
        if (button) {
            button.textContent = 'üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å';
            button.disabled = false;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        showPublicationNotification('error', `‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ${error.message}`);
    }
};

window.moveQueuePost = function(postId, direction) {
    const queuePosts = getFromStorage('threads_queue_posts') || [];
    const index = queuePosts.findIndex(p => p.id === postId);
    
    if (index === -1) return;
    
    const newIndex = direction === 'up' ? index - 1 : index + 1;
    
    if (newIndex >= 0 && newIndex < queuePosts.length) {
        [queuePosts[index], queuePosts[newIndex]] = [queuePosts[newIndex], queuePosts[index]];
        saveToStorage('threads_queue_posts', queuePosts);
        displayQueue();
    }
};

// === –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–ï–ì–û–î–ù–Ø–®–ù–ò–• –ü–û–°–¢–û–í ===
function updateTodayPosts() {
    const container = document.getElementById('today-posts');
    if (!container) return;
    
    const scheduleData = getFromStorage('threads_schedule');
    
    if (!scheduleData || !scheduleData.postingTimes || scheduleData.postingTimes.length === 0) {
        container.innerHTML = '<p style="color: #6c757d; text-align: center; padding: 20px;">–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ</p>';
        return;
    }
    
    let html = '';
    scheduleData.postingTimes.forEach((time, index) => {
        html += `
            <div class="post-item" data-time="${time}">
                <span class="post-time">${time}</span>
                <span class="post-status">‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ</span>
                <span class="post-content">–ü–æ—Å—Ç –≥–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</span>
                <button class="post-delete-btn" onclick="removeScheduledPost('${time}')" title="–£–¥–∞–ª–∏—Ç—å">üóëÔ∏è</button>
            </div>
        `;
    });
    
    container.innerHTML = html;
}

// === –£–î–ê–õ–ï–ù–ò–ï –ó–ê–ü–õ–ê–ù–ò–†–û–í–ê–ù–ù–û–ì–û –ü–û–°–¢–ê ===
window.removeScheduledPost = function(timeToRemove) {
    const scheduleData = getFromStorage('threads_schedule');
    if (!scheduleData || !scheduleData.postingTimes) return;
    
    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º—è –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    scheduleData.postingTimes = scheduleData.postingTimes.filter(time => time !== timeToRemove);
    scheduleData.postsPerDay = scheduleData.postingTimes.length;
    scheduleData.updatedAt = new Date().toISOString();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    saveToStorage('threads_schedule', scheduleData);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    updateTodayPosts();
    updateQueueCount();
    updateScheduleDisplay();
    
    alert(`‚úÖ –ü–æ—Å—Ç –Ω–∞ ${timeToRemove} —É–¥–∞–ª–µ–Ω –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è`);
};

// === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–ù–û–ü–û–ö –£–ü–†–ê–í–õ–ï–ù–ò–Ø ===
function initializeControlButtons() {
    const clearScheduleBtn = document.getElementById('clear-schedule');
    
    console.log('Initializing control buttons, clear button found:', !!clearScheduleBtn);
    
    if (clearScheduleBtn) {
        clearScheduleBtn.addEventListener('click', clearSchedule);
        console.log('Clear schedule button initialized');
    } else {
        console.warn('Clear schedule button not found');
    }
}

// === –û–ß–ò–°–¢–ö–ê –†–ê–°–ü–ò–°–ê–ù–ò–Ø ===
function clearSchedule() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?')) {
        // –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        localStorage.removeItem('threads_schedule');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        updateTodayPosts();
        updateQueueCount();
        updateScheduleDisplay();
        
        alert('‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ!');
    }
}

// === –û–¢–õ–ê–î–ö–ê ===
console.log('Threads Autopilot JavaScript loaded successfully');