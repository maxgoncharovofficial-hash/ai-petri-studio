// Cases List Page JavaScript

document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ Cases list page initialized');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initializePage();
    loadCasesList();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    setupEventHandlers();
});

function initializePage() {
    console.log('üìã Initializing cases list page');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
    const backButton = document.getElementById('back-button');
    const addNewCaseBtn = document.getElementById('add-new-case-btn');
    const casesList = document.getElementById('cases-list');
    const emptyState = document.getElementById('empty-state');
    const casesCount = document.getElementById('cases-count');
    
    console.log('üìã Back button:', backButton);
    console.log('üìã Add new case button:', addNewCaseBtn);
    console.log('üìã Cases list:', casesList);
    console.log('üìã Empty state:', emptyState);
    console.log('üìã Cases count:', casesCount);
}

function setupEventHandlers() {
    // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    const backButton = document.getElementById('back-button');
    if (backButton) {
        backButton.addEventListener('click', function() {
            console.log('‚¨ÖÔ∏è Back button clicked');
            window.location.href = 'cases.html';
        });
        
        backButton.addEventListener('touchstart', function(e) {
            e.preventDefault();
            console.log('‚¨ÖÔ∏è Back button touched');
            window.location.href = 'cases.html';
        });
    }
    
    // –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–µ–π—Å"
    const addNewCaseBtn = document.getElementById('add-new-case-btn');
    if (addNewCaseBtn) {
        addNewCaseBtn.addEventListener('click', function() {
            console.log('‚ûï Add new case button clicked');
            window.location.href = 'cases.html';
        });
        
        addNewCaseBtn.addEventListener('touchstart', function(e) {
            e.preventDefault();
            console.log('‚ûï Add new case button touched');
            window.location.href = 'cases.html';
        });
    }
    
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫
    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('case-action-btn')) {
            e.preventDefault();
            e.stopPropagation();
            
            const action = e.target.dataset.action;
            const caseId = parseInt(e.target.dataset.caseId);
            
            console.log('üé¥ Case action button clicked:', action, 'for case:', caseId);
            
            if (action === 'view') {
                const cases = getCases();
                const caseData = cases.find(c => c.id === caseId);
                if (caseData) {
                    showCaseModal(caseData);
                }
            } else if (action === 'edit') {
                const cases = getCases();
                const caseData = cases.find(c => c.id === caseId);
                if (caseData) {
                    editCase(caseData);
                }
            } else if (action === 'delete') {
                deleteCase(caseId);
            }
        }
    });
}

function getCases() {
    console.log('üìã Getting cases from localStorage');
    
    try {
        const savedData = localStorage.getItem('cases');
        console.log('üìã Raw data:', savedData);
        
        if (savedData) {
            const parsed = JSON.parse(savedData);
            if (Array.isArray(parsed)) {
                console.log('üìã Parsed cases:', parsed.length);
                return parsed;
            } else {
                console.log('üìã Data is not array, returning empty array');
                return [];
            }
        } else {
            console.log('üìã No data in localStorage, returning empty array');
            return [];
        }
    } catch (error) {
        console.error('‚ùå Error in getCases:', error);
        return [];
    }
}

function loadCasesList() {
    console.log('üìã Loading cases list');
    
    const cases = getCases();
    const casesList = document.getElementById('cases-list');
    const emptyState = document.getElementById('empty-state');
    const casesCount = document.getElementById('cases-count');
    
    if (!casesList || !emptyState || !casesCount) {
        console.error('‚ùå Required elements not found');
        return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
    casesCount.textContent = cases.length;
    console.log('üìã Cases count updated:', cases.length);
    
    if (cases.length === 0) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        casesList.innerHTML = '';
        emptyState.style.display = 'block';
        console.log('üìã Showing empty state');
        return;
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    emptyState.style.display = 'none';
    console.log('üìã Hiding empty state');
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–µ–π—Å—ã –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    cases.sort((a, b) => new Date(b.saved_at) - new Date(a.saved_at));
    console.log('üìã Cases sorted by date');
    
    // –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–µ–π—Å–∞
    const casesHTML = cases.map((caseItem, index) => createCaseCard(caseItem, index)).join('');
    console.log('üìã Generated HTML length:', casesHTML.length);
    
    casesList.innerHTML = casesHTML;
    console.log('üìã Cases HTML inserted into DOM');
}

function createCaseCard(caseItem, index) {
    console.log('üìã Creating card for case:', caseItem.clientName);
    
    const description = caseItem.howFoundOut || caseItem.goals || caseItem.problems || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ';
    const shortDescription = description.length > 100 ? description.substring(0, 100) + '...' : description;
    
    return `
        <div class="case-card" data-case-id="${caseItem.id}">
            <div class="case-header">
                <div class="case-number">#${index + 1}</div>
                <div class="case-title">
                    <h3>üë§ ${caseItem.clientName}</h3>
                    <p class="case-date">üìÖ ${caseItem.date}</p>
                </div>
            </div>
            
            <div class="case-description">
                <p>${shortDescription}</p>
            </div>
            
            <div class="case-actions">
                <button class="case-action-btn" data-action="view" data-case-id="${caseItem.id}">
                    üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä
                </button>
                <button class="case-action-btn" data-action="edit" data-case-id="${caseItem.id}">
                    ‚úèÔ∏è –ü—Ä–∞–≤–∫–∞
                </button>
                <button class="case-action-btn" data-action="delete" data-case-id="${caseItem.id}">
                    üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                </button>
            </div>
        </div>
    `;
}

function showCaseModal(caseData) {
    console.log('üìã Showing case modal for:', caseData.clientName);
    
    const message = `üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–µ–π—Å–∞: ${caseData.clientName}

üìÖ –î–∞—Ç–∞: ${caseData.date}
üéØ –¶–µ–ª–∏: ${caseData.goals || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚ùó –ü—Ä–æ–±–ª–µ–º—ã: ${caseData.problems || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: ${caseData.results || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üí° –ß—Ç–æ –ø–æ–º–æ–≥–ª–æ: ${caseData.whatHelped || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`;
    
    alert(message);
    console.log('‚úÖ Case modal shown');
}

function editCase(caseData) {
    console.log('üìù Editing case:', caseData.clientName);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–µ–π—Å–∞ –≤ sessionStorage –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    sessionStorage.setItem('editingCase', JSON.stringify(caseData));
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–∑–¥–∞–Ω–∏—è –∫–µ–π—Å–∞
    window.location.href = 'cases.html';
}

function deleteCase(caseId) {
    console.log('üóëÔ∏è Deleting case:', caseId);
    
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–µ–π—Å?')) {
        try {
            let cases = JSON.parse(localStorage.getItem('cases') || '[]');
            cases = cases.filter(c => c.id !== caseId);
            localStorage.setItem('cases', JSON.stringify(cases));
            
            console.log('‚úÖ Case deleted successfully');
            alert('–ö–µ–π—Å —É–¥–∞–ª–µ–Ω!');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
            loadCasesList();
        } catch (error) {
            console.error('‚ùå Error deleting case:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–µ–π—Å–∞');
        }
    }
} 