// Cases Page JavaScript - –ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–ü–ò–°–ê–ù –° –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ô –û–¢–õ–ê–î–ö–û–ô

let currentEditingCaseId = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ === DOMContentLoaded - Cases page initialization started ===');
    console.log('üìã Script version: v30.23');
    console.log('üìã Current timestamp:', new Date().toISOString());
    console.log('üìã User agent:', navigator.userAgent);
    console.log('üìã Viewport size:', window.innerWidth, 'x', window.innerHeight);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    const form = document.getElementById('cases-form');
    const saveButton = document.getElementById('save-button');
    const saveModal = document.getElementById('save-modal');
    const modalOkButton = document.getElementById('modal-ok-button');
    
    console.log('üìã Form found:', form);
    console.log('üíæ Save button found:', saveButton);
    console.log('üì± Save modal found:', saveModal);
    console.log('‚úÖ Modal OK button found:', modalOkButton);
    
    if (!form) {
        console.error('‚ùå CRITICAL ERROR: Form not found!');
        return;
    }
    
    if (!saveButton) {
        console.error('‚ùå CRITICAL ERROR: Save button not found!');
        return;
    }
    
    if (!saveModal) {
        console.error('‚ùå CRITICAL ERROR: Save modal not found!');
        return;
    }
    
    if (!modalOkButton) {
        console.error('‚ùå CRITICAL ERROR: Modal OK button not found!');
        return;
    }
    
    console.log('‚úÖ All critical elements found successfully');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∫–ª–∞–¥–æ–∫
    initializeTabs();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
    const backButton = document.getElementById('back-button');
    console.log('‚¨ÖÔ∏è Back button found:', backButton);
    
    if (backButton) {
        backButton.addEventListener('click', function(e) {
            e.preventDefault();
            console.log('‚¨ÖÔ∏è Back button clicked');
            window.location.href = 'personality.html';
        });
        
        backButton.addEventListener('touchstart', function(e) {
            e.preventDefault();
            console.log('‚¨ÖÔ∏è Back button touched');
            window.location.href = 'personality.html';
        });
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ñ–æ—Ä–º—ã
    initializeFormHandlers();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    initializeModals();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–µ–π—Å–æ–≤
    initializeViewCasesButton();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    updateProgress();
    
    console.log('üöÄ === Cases page initialization completed successfully ===');
    
    // –ì–õ–û–ë–ê–õ–¨–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–õ–ò–ö–û–í –î–õ–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –ò –î–ï–õ–ï–ì–ò–†–û–í–ê–ù–ò–Ø
    document.addEventListener('click', function(e) {
        console.log('üîç === GLOBAL CLICK DETECTED ===');
        console.log('üîç Clicked element:', e.target);
        console.log('üîç Element tag:', e.target.tagName);
        console.log('üîç Element classes:', e.target.className);
        console.log('üîç Element ID:', e.target.id);
        
        // –î–ï–õ–ï–ì–ò–†–û–í–ê–ù–ò–ï –°–û–ë–´–¢–ò–ô –î–õ–Ø –ö–ù–û–ü–û–ö –ö–ê–†–¢–û–ß–ï–ö
        if (e.target.classList.contains('case-action-btn')) {
            e.preventDefault();
            e.stopPropagation();
            
            console.log('‚úÖ CASE ACTION BUTTON CLICKED!');
            const action = e.target.dataset.action;
            const caseId = parseInt(e.target.dataset.caseId);
            
            console.log('üìã Action:', action);
            console.log('üìã Case ID:', caseId);
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
            if (action === 'view') {
                const cases = getCases();
                const caseData = cases.find(case_ => case_.id === caseId);
                if (caseData) {
                    showCaseModal(caseData);
                }
            } else if (action === 'edit') {
                const cases = getCases();
                const caseData = cases.find(case_ => case_.id === caseId);
                if (caseData) {
                    loadCaseForEditing(caseData);
                }
            } else if (action === 'delete') {
                showDeleteConfirmModal(caseId);
            }
        }
        
        if (e.target.id === 'save-button') {
            console.log('‚úÖ SAVE BUTTON CLICKED!');
        }
        
        if (e.target.id === 'modal-ok-button') {
            console.log('‚úÖ MODAL OK BUTTON CLICKED!');
        }
    });
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∫–ª–∞–¥–æ–∫
function initializeTabs() {
    console.log('üìë === Initializing tabs ===');
    const tabButtons = document.querySelectorAll('.tab-button');
    console.log('üìë Found tab buttons:', tabButtons.length);
    
    tabButtons.forEach((button, index) => {
        console.log(`üìë Tab button ${index + 1}:`, button);
        console.log(`üìë Tab button ${index + 1} data-tab:`, button.getAttribute('data-tab'));
        
        button.addEventListener('click', function(e) {
            e.preventDefault();
            const tabName = this.getAttribute('data-tab');
            console.log('üìë Tab button clicked:', tabName);
            switchTab(tabName);
        });
        
        button.addEventListener('touchstart', function(e) {
            e.preventDefault();
            const tabName = this.getAttribute('data-tab');
            console.log('üìë Tab button touched:', tabName);
            switchTab(tabName);
        });
    });
    console.log('üìë === Tabs initialization completed ===');
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
function switchTab(tabName) {
    console.log('üîÑ === switchTab() called with tabName:', tabName, '===');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    document.querySelectorAll('.tab-button').forEach(btn => {
        btn.classList.remove('active');
    });
    const activeTabButton = document.querySelector(`[data-tab="${tabName}"]`);
    if (activeTabButton) {
        activeTabButton.classList.add('active');
        console.log('‚úÖ Active tab button updated');
    } else {
        console.error('‚ùå Tab button not found for:', tabName);
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
    document.querySelectorAll('.tab-panel').forEach(panel => {
        panel.classList.remove('active');
    });
    const activeTabPanel = document.getElementById(`${tabName}-tab`);
    if (activeTabPanel) {
        activeTabPanel.classList.add('active');
        console.log('‚úÖ Active tab panel updated');
    } else {
        console.error('‚ùå Tab panel not found for:', tabName);
    }
    
    // –ï—Å–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ø–∏—Å–æ–∫ –∫–µ–π—Å–æ–≤, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
    if (tabName === 'list') {
        console.log('üìã Switching to list tab, showing fullscreen interface...');
        showFullscreenCasesInterface();
    }
    
    console.log('üîÑ === Tab switched successfully to:', tabName, '===');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ñ–æ—Ä–º—ã
function initializeFormHandlers() {
    console.log('üìù === Initializing form handlers ===');
    
    const form = document.getElementById('cases-form');
    const textareas = document.querySelectorAll('textarea');
    const saveButton = document.getElementById('save-button');
    
    console.log('üìù Form found:', form);
    console.log('üíæ Save button found:', saveButton);
    console.log('üìù Textareas found:', textareas.length);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    if (form) {
        form.addEventListener('submit', function(e) {
            e.preventDefault();
            console.log('üìù Form submitted, calling saveData()');
            saveData();
        });
    }
    
    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö)
    if (saveButton) {
        console.log('üíæ Setting up save button handlers...');
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–ª–∏–∫–∞ (desktop)
        saveButton.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            console.log('üíæ === SAVE BUTTON CLICKED (DESKTOP) ===');
            console.log('üíæ Event type:', e.type);
            console.log('üíæ Target:', e.target);
            console.log('üíæ Current target:', e.currentTarget);
            saveData();
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è touchstart (mobile)
        saveButton.addEventListener('touchstart', function(e) {
            e.preventDefault();
            e.stopPropagation();
            console.log('üíæ === SAVE BUTTON TOUCHED (MOBILE) ===');
            console.log('üíæ Event type:', e.type);
            console.log('üíæ Target:', e.target);
            console.log('üíæ Current target:', e.currentTarget);
            saveData();
        });
        
        console.log('‚úÖ Save button handlers set up successfully');
    } else {
        console.error('‚ùå CRITICAL ERROR: Save button not found!');
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ textarea
    textareas.forEach((textarea, index) => {
        const questionNumber = index + 1;
        console.log(`üìù Setting up handlers for textarea ${questionNumber}:`, textarea);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        textarea.addEventListener('input', function() {
            updateCharCounter(questionNumber, this.value.length);
            updateProgress();
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ–∫—É—Å–∞
        textarea.addEventListener('focus', function() {
            this.style.borderColor = 'var(--tg-theme-button-color, #007bff)';
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞
        textarea.addEventListener('blur', function() {
            this.style.borderColor = 'var(--tg-theme-hint-color, #e9ecef)';
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ touchstart –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
        textarea.addEventListener('touchstart', function(e) {
            e.stopPropagation();
        });
    });
    
    console.log('üìù === Form handlers initialization completed ===');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤
function updateCharCounter(questionNumber, charCount) {
    const counter = document.getElementById(`char-count-${questionNumber}`);
    if (counter) {
        counter.textContent = charCount;
        
        // –ò–∑–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –ø—Ä–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ –ª–∏–º–∏—Ç—É
        if (charCount > 1800) {
            counter.style.color = '#dc3545';
        } else if (charCount > 1500) {
            counter.style.color = '#ffc107';
        } else {
            counter.style.color = 'var(--tg-theme-hint-color, #6c757d)';
        }
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function updateProgress() {
    const textareas = document.querySelectorAll('textarea');
    let filledCount = 0;
    
    textareas.forEach(textarea => {
        if (textarea.value.trim().length > 0) {
            filledCount++;
        }
    });
    
    const percentage = Math.round((filledCount / 6) * 100);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
    const filledQuestions = document.getElementById('filled-questions');
    const progressPercentage = document.getElementById('progress-percentage');
    const progressFill = document.getElementById('progress-fill');
    
    if (filledQuestions) filledQuestions.textContent = `${filledCount}/6`;
    if (progressPercentage) progressPercentage.textContent = `${percentage}%`;
    if (progressFill) progressFill.style.width = `${percentage}%`;
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö - –ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–ü–ò–°–ê–ù–ê –° –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ô –û–¢–õ–ê–î–ö–û–ô
function saveData() {
    console.log('üíæ === –ù–ê–ß–ê–õ–û –°–û–•–†–ê–ù–ï–ù–ò–Ø –ö–ï–ô–°–ê ===');
    console.log('üíæ Function saveData() called at:', new Date().toISOString());
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–æ—Ä–º–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const form = document.getElementById('cases-form');
    if (!form) {
        console.error('‚ùå CRITICAL ERROR: Form not found!');
        alert('–û—à–∏–±–∫–∞: —Ñ–æ—Ä–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
    }
    console.log('‚úÖ Form found successfully');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã
    const question1 = document.getElementById('question-1');
    const question2 = document.getElementById('question-2');
    const question3 = document.getElementById('question-3');
    const question4 = document.getElementById('question-4');
    const question5 = document.getElementById('question-5');
    const question6 = document.getElementById('question-6');
    
    console.log('üìù Question 1 element:', question1);
    console.log('üìù Question 2 element:', question2);
    console.log('üìù Question 3 element:', question3);
    console.log('üìù Question 4 element:', question4);
    console.log('üìù Question 5 element:', question5);
    console.log('üìù Question 6 element:', question6);
    
    if (!question1 || !question2 || !question3 || !question4 || !question5 || !question6) {
        console.error('‚ùå CRITICAL ERROR: One or more form elements not found!');
        alert('–û—à–∏–±–∫–∞: —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
    }
    
    // –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –û–¢–õ–ê–î–ö–ê –ó–ù–ê–ß–ï–ù–ò–ô
    console.log('üìù question1.value RAW:', `"${question1.value}"`);
    console.log('üìù question1.value LENGTH:', question1.value.length);
    console.log('üìù question1.value TRIMMED:', `"${question1.value.trim()}"`);
    console.log('üìù question1.value TRIMMED LENGTH:', question1.value.trim().length);
    
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
    const byQuerySelector = document.querySelector('#question-1').value;
    const byName = document.querySelector('textarea[name="client_name"]').value;
    const byForm = document.forms['cases-form']['client_name'].value;
    
    console.log('üìù By querySelector:', `"${byQuerySelector}"`);
    console.log('üìù By name:', `"${byName}"`);
    console.log('üìù By form:', `"${byForm}"`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ textarea
    const allTextareas = document.querySelectorAll('textarea');
    console.log('üìù All textareas values:');
    allTextareas.forEach((ta, index) => {
        console.log(`üìù Textarea ${index}: "${ta.value}"`);
    });
    
    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
    const clientName = question1.value.trim();
    console.log('üë§ –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:', clientName);
    console.log('üë§ –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ length:', clientName.length);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è - –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
    if (!clientName) {
        console.log('‚ùå Validation failed: client name is empty');
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞');
        return;
    }
    console.log('‚úÖ Client name validation passed');
    
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
    const formData = {
        id: window.editingCaseId || Date.now(),
        date: new Date().toLocaleDateString('ru-RU'),
        clientName: clientName,
        howFoundOut: question2.value.trim(),
        goals: question3.value.trim(),
        problems: question4.value.trim(),
        results: question5.value.trim(),
        whatHelped: question6.value.trim(),
        saved_at: new Date().toISOString()
    };
    console.log('üìä –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', formData);
    console.log('üìä Form data JSON:', JSON.stringify(formData));
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–µ–π—Å—ã –∏–∑ localStorage
    let existingCases = [];
    try {
        console.log('üíæ Reading from localStorage...');
        const savedData = localStorage.getItem('cases');
        console.log('üíæ Raw localStorage data:', savedData);
        console.log('üíæ Raw localStorage data type:', typeof savedData);
        
        if (savedData) {
            existingCases = JSON.parse(savedData);
            console.log('üíæ Parsed existing cases:', existingCases);
            console.log('üíæ Parsed cases type:', typeof existingCases);
            console.log('üíæ Is array:', Array.isArray(existingCases));
            
            if (!Array.isArray(existingCases)) {
                console.log('üíæ Data is not array, resetting to empty array');
                existingCases = [];
            }
        } else {
            console.log('üíæ No existing cases found, starting with empty array');
        }
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —ç—Ç–æ –º–∞—Å—Å–∏–≤
        if (!Array.isArray(existingCases)) {
            console.log('üíæ Existing cases is not array, resetting to empty array');
            existingCases = [];
        }
        
    } catch (error) {
        console.error('‚ùå Error parsing existing cases:', error);
        existingCases = [];
    }
    
    console.log('üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–µ–π—Å—ã –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º:', existingCases);
    console.log('üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–µ–π—Å–æ–≤:', existingCases.length);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–µ–π—Å
    if (window.editingCaseId) {
        // –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–µ–π—Å
        const caseIndex = existingCases.findIndex(c => c.id === window.editingCaseId);
        if (caseIndex !== -1) {
            // –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π ID –∏ –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
            const originalId = existingCases[caseIndex].id;
            const originalDate = existingCases[caseIndex].saved_at;
            
            existingCases[caseIndex] = {
                ...formData,
                id: originalId,
                saved_at: originalDate,
                updated_at: new Date().toISOString()
            };
            
            console.log('üìù Case updated:', formData.clientName);
        }
        
        // –°–±—Ä–æ—Å–∏—Ç—å —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        delete window.editingCaseId;
    } else {
        // –†–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–µ–π—Å
        existingCases.push(formData);
        console.log('‚ûï New case added:', formData.clientName);
    }
    
    console.log('üìã –ö–µ–π—Å—ã –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', existingCases);
    console.log('üìã –ö–µ–π—Å—ã JSON:', JSON.stringify(existingCases));
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    try {
        console.log('üíæ Attempting to save to localStorage...');
        const dataToSave = JSON.stringify(existingCases);
        console.log('üíæ Data to save:', dataToSave);
        console.log('üíæ Data to save length:', dataToSave.length);
        
        localStorage.setItem('cases', dataToSave);
        console.log('‚úÖ Data saved to localStorage successfully');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
        const saved = localStorage.getItem('cases');
        console.log('üíæ Verification - saved data:', saved);
        console.log('üíæ Verification - saved data length:', saved ? saved.length : 0);
        
        if (saved === dataToSave) {
            console.log('‚úÖ Data verification successful - saved data matches');
        } else {
            console.error('‚ùå Data verification failed - saved data does not match');
        }
        
    } catch (error) {
        console.error('‚ùå Error saving to localStorage:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: ' + error.message);
        return;
    }
    
    // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
    console.log('üßπ Clearing form...');
    clearForm();
    console.log('‚úÖ Form cleared');
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    currentEditingCaseId = null;
    console.log('üîÑ Editing mode reset');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    console.log('üì± Showing success message...');
    showSuccessMessage();
    console.log('‚úÖ Success message shown');
    
    console.log('üíæ === –ö–û–ù–ï–¶ –°–û–•–†–ê–ù–ï–ù–ò–Ø –ö–ï–ô–°–ê ===');
}

// –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã
function clearForm() {
    console.log('üßπ === Clearing form ===');
    const textareas = document.querySelectorAll('textarea');
    console.log('üßπ Found textareas to clear:', textareas.length);
    
    textareas.forEach((textarea, index) => {
        console.log(`üßπ Clearing textarea ${index + 1}:`, textarea);
        textarea.value = '';
        updateCharCounter(index + 1, 0);
    });
    updateProgress();
    console.log('üßπ === Form cleared successfully ===');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–µ–π—Å–∞ –≤ —Ñ–æ—Ä–º—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function loadCaseForEditing(caseData) {
    console.log('‚úèÔ∏è === Loading case for editing:', caseData, '===');
    
    document.getElementById('question-1').value = caseData.clientName || '';
    document.getElementById('question-2').value = caseData.howFoundOut || '';
    document.getElementById('question-3').value = caseData.goals || '';
    document.getElementById('question-4').value = caseData.problems || '';
    document.getElementById('question-5').value = caseData.results || '';
    document.getElementById('question-6').value = caseData.whatHelped || '';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
    for (let i = 1; i <= 6; i++) {
        const value = document.getElementById(`question-${i}`).value;
        updateCharCounter(i, value.length);
    }
    
    updateProgress();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    currentEditingCaseId = caseData.id;
    console.log('‚úèÔ∏è Editing mode set for case ID:', currentEditingCaseId);
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Å–æ–∑–¥–∞–Ω–∏—è
    switchTab('create');
    console.log('‚úèÔ∏è === Case loaded for editing successfully ===');
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–µ–π—Å–æ–≤ - –ò–°–ü–†–ê–í–õ–ï–ù–ê
function getCases() {
    console.log('üìã === getCases() called ===');
    
    try {
        const savedData = localStorage.getItem('cases');
        console.log('üìã Raw localStorage data in getCases:', savedData);
        console.log('üìã Raw localStorage data type:', typeof savedData);
        
        if (savedData) {
            const parsed = JSON.parse(savedData);
            console.log('üìã Parsed cases data in getCases:', parsed);
            console.log('üìã Parsed data type:', typeof parsed);
            console.log('üìã Is array:', Array.isArray(parsed));
            
            if (Array.isArray(parsed)) {
                console.log('üìã Returning array of cases:', parsed);
                console.log('üìã Cases count:', parsed.length);
                return parsed;
            } else {
                console.log('üìã Parsed data is not array, returning empty array');
                return [];
            }
        } else {
            console.log('üìã No data in localStorage, returning empty array');
            return [];
        }
    } catch (error) {
        console.error('‚ùå Error in getCases:', error);
        return [];
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–µ–π—Å–æ–≤ - –ò–°–ü–†–ê–í–õ–ï–ù–ê
function loadCasesList() {
    console.log('üìã === loadCasesList() called ===');
    
    const cases = getCases();
    console.log('üìã Loaded cases from localStorage:', cases);
    console.log('üìã Cases count:', cases.length);
    
    const casesList = document.getElementById('cases-list');
    const emptyState = document.getElementById('empty-state');
    const casesCount = document.getElementById('cases-count');
    
    console.log('üìã Cases list element:', casesList);
    console.log('üìã Empty state element:', emptyState);
    console.log('üìã Cases count element:', casesCount);
    
    if (!casesList) {
        console.error('‚ùå CRITICAL ERROR: Cases list element not found!');
        return;
    }
    
    if (!emptyState) {
        console.error('‚ùå CRITICAL ERROR: Empty state element not found!');
        return;
    }
    
    if (!casesCount) {
        console.error('‚ùå CRITICAL ERROR: Cases count element not found!');
        return;
    }
    
    // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ü–û–ö–ê–ó–ê–¢–¨ –ö–û–ù–¢–ï–ô–ù–ï–† –°–ü–ò–°–ö–ê
    casesList.style.display = 'flex';
    casesList.style.visibility = 'visible';
    casesList.style.opacity = '1';
    casesList.style.width = '100%';
    casesList.style.minHeight = '200px';
    console.log('üìã Cases list container forced to show');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
    const countText = `${cases.length} –∫–µ–π—Å${cases.length === 1 ? '' : cases.length < 5 ? '–∞' : '–æ–≤'}`;
    casesCount.textContent = countText;
    console.log('üìã Cases count updated:', countText);
    
    if (cases.length === 0) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        casesList.innerHTML = '';
        emptyState.style.display = 'block';
        console.log('üìã Showing empty state');
        return;
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    emptyState.style.display = 'none';
    console.log('üìã Hiding empty state');
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–µ–π—Å—ã –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    cases.sort((a, b) => new Date(b.saved_at) - new Date(a.saved_at));
    console.log('üìã Cases sorted by date');
    
    // –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–µ–π—Å–∞
    const casesHTML = cases.map(case_ => createCaseCard(case_)).join('');
    console.log('üìã Generated HTML length:', casesHTML.length);
    console.log('üìã Generated HTML preview:', casesHTML.substring(0, 200) + '...');
    
    casesList.innerHTML = casesHTML;
    console.log('üìã Cases HTML inserted into DOM');
    
    // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ü–û–ö–ê–ó–´–í–ê–ù–ò–ï –°–ü–ò–°–ö–ê
    casesList.style.display = 'flex';
    casesList.style.flexDirection = 'column';
    casesList.style.gap = '16px';
    casesList.style.visibility = 'visible';
    casesList.style.opacity = '1';
    casesList.style.width = '100%';
    casesList.style.minHeight = '200px';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ä—Ç–æ—á–∫—É
    const cards = casesList.querySelectorAll('.case-card');
    console.log('üìã Found case cards in DOM:', cards.length);
    cards.forEach((card, index) => {
        card.style.display = 'block';
        card.style.visibility = 'visible';
        card.style.opacity = '1';
        card.style.position = 'relative';
        card.style.zIndex = '1';
        console.log(`üìã Card ${index + 1} forced to show`);
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    addCaseCardHandlers();
    console.log('üìã Case card handlers added');
    
    // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø
    console.log('üîç === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ===');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å —Å–ø–∏—Å–∫–∞
    const listComputedStyle = window.getComputedStyle(casesList);
    console.log('üìã Cases list computed display:', listComputedStyle.display);
    console.log('üìã Cases list computed visibility:', listComputedStyle.visibility);
    console.log('üìã Cases list computed opacity:', listComputedStyle.opacity);
    console.log('üìã Cases list computed height:', listComputedStyle.height);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ä—Ç–æ—á–∫—É
    const allCards = document.querySelectorAll('.case-card');
    console.log('üìã Total cards found in DOM:', allCards.length);
    allCards.forEach((card, index) => {
        const cardStyle = window.getComputedStyle(card);
        console.log(`üìã Card ${index + 1}:`);
        console.log(`   - Display: ${cardStyle.display}`);
        console.log(`   - Visibility: ${cardStyle.visibility}`);
        console.log(`   - Opacity: ${cardStyle.opacity}`);
        console.log(`   - Height: ${cardStyle.height}`);
        console.log(`   - Background: ${cardStyle.backgroundColor}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    const actionButtons = document.querySelectorAll('.case-action-btn');
    console.log('üìã Action buttons found:', actionButtons.length);
    actionButtons.forEach((btn, index) => {
        const btnStyle = window.getComputedStyle(btn);
        console.log(`üìã Button ${index + 1}:`);
        console.log(`   - Display: ${btnStyle.display}`);
        console.log(`   - Visibility: ${btnStyle.visibility}`);
        console.log(`   - Action: ${btn.dataset.action}`);
        console.log(`   - Case ID: ${btn.dataset.caseId}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
    const saveModal = document.getElementById('save-modal');
    const viewModal = document.getElementById('view-case-modal');
    const deleteModal = document.getElementById('delete-confirm-modal');
    
    console.log('üì± Modal elements found:');
    console.log('   - Save modal:', saveModal);
    console.log('   - View modal:', viewModal);
    console.log('   - Delete modal:', deleteModal);
    
    if (saveModal) {
        const modalStyle = window.getComputedStyle(saveModal);
        console.log('üì± Save modal computed style:');
        console.log('   - Display:', modalStyle.display);
        console.log('   - Visibility:', modalStyle.visibility);
        console.log('   - Position:', modalStyle.position);
        console.log('   - Z-index:', modalStyle.zIndex);
    }
    
    console.log('üìã === loadCasesList() completed successfully ===');
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–µ–π—Å–∞
function createCaseCard(case_) {
    console.log('üé¥ Creating card for case:', case_);
    const description = case_.howFoundOut ? case_.howFoundOut.substring(0, 100) + (case_.howFoundOut.length > 100 ? '...' : '') : '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ';
    
    const cardHTML = `
        <div class="case-card" data-case-id="${case_.id}">
            <div class="case-header">
                <h4 class="case-title">${case_.clientName}</h4>
                <span class="case-date">${case_.date}</span>
            </div>
            <div class="case-description">${description}</div>
            <div class="case-actions">
                <button class="case-action-btn view" data-action="view" data-case-id="${case_.id}">üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å</button>
                <button class="case-action-btn edit" data-action="edit" data-case-id="${case_.id}">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                <button class="case-action-btn delete" data-action="delete" data-case-id="${case_.id}">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
            </div>
        </div>
    `;
    
    console.log('üé¥ Generated card HTML:', cardHTML);
    return cardHTML;
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –∫–µ–π—Å–æ–≤
function addCaseCardHandlers() {
    console.log('üé¥ === Adding case card handlers ===');
    const actionButtons = document.querySelectorAll('.case-action-btn');
    console.log('üé¥ Found action buttons:', actionButtons.length);
    
    actionButtons.forEach((button, index) => {
        console.log(`üé¥ Setting up handler for button ${index + 1}:`, button);
        console.log(`üé¥ Button action:`, button.getAttribute('data-action'));
        console.log(`üé¥ Button case ID:`, button.getAttribute('data-case-id'));
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–ª–∏–∫–∞ (desktop)
        button.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            const action = this.getAttribute('data-action');
            const caseId = parseInt(this.getAttribute('data-case-id'));
            const cases = getCases();
            const caseData = cases.find(case_ => case_.id === caseId);
            
            console.log('üé¥ Action button clicked:', action, 'for case:', caseId);
            
            if (!caseData) {
                console.error('‚ùå Case data not found for ID:', caseId);
                return;
            }
            
            switch (action) {
                case 'view':
                    showCaseModal(caseData);
                    break;
                case 'edit':
                    loadCaseForEditing(caseData);
                    break;
                case 'delete':
                    showDeleteConfirmModal(caseId);
                    break;
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è touchstart (mobile)
        button.addEventListener('touchstart', function(e) {
            e.preventDefault();
            e.stopPropagation();
            const action = this.getAttribute('data-action');
            const caseId = parseInt(this.getAttribute('data-case-id'));
            const cases = getCases();
            const caseData = cases.find(case_ => case_.id === caseId);
            
            console.log('üé¥ Action button touched:', action, 'for case:', caseId);
            
            if (!caseData) {
                console.error('‚ùå Case data not found for ID:', caseId);
                return;
            }
            
            switch (action) {
                case 'view':
                    showCaseModal(caseData);
                    break;
                case 'edit':
                    loadCaseForEditing(caseData);
                    break;
                case 'delete':
                    showDeleteConfirmModal(caseId);
                    break;
            }
        });
    });
    console.log('üé¥ === Case card handlers added successfully ===');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
function initializeModals() {
    console.log('üì± === Initializing modals ===');
    
    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    const saveModal = document.getElementById('save-modal');
    const saveOkButton = document.getElementById('modal-ok-button');
    
    console.log('üì± Save modal found:', saveModal);
    console.log('üì± Save OK button found:', saveOkButton);
    
    if (saveOkButton) {
        console.log('üì± Setting up save OK button handlers...');
        
        saveOkButton.addEventListener('click', function(e) {
            e.preventDefault();
            console.log('üì± Save OK button clicked');
            hideModal('save-modal');
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ø–∏—Å–∫–∞ –∫–µ–π—Å–æ–≤ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            setTimeout(() => {
                window.location.href = 'cases-list.html';
                console.log('üì± Redirecting to cases list after save');
            }, 100);
        });
        
        saveOkButton.addEventListener('touchstart', function(e) {
            e.preventDefault();
            console.log('üì± Save OK button touched');
            hideModal('save-modal');
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ø–∏—Å–∫–∞ –∫–µ–π—Å–æ–≤ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            setTimeout(() => {
                window.location.href = 'cases-list.html';
                console.log('üì± Redirecting to cases list after save');
            }, 100);
        });
        
        console.log('‚úÖ Save OK button handlers set up successfully');
    } else {
        console.error('‚ùå CRITICAL ERROR: Save OK button not found!');
    }
    
    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–µ–π—Å–∞
    const viewModal = document.getElementById('view-case-modal');
    const editCaseButton = document.getElementById('edit-case-button');
    const closeViewModal = document.getElementById('close-view-modal');
    
    console.log('üì± View modal found:', viewModal);
    console.log('üì± Edit case button found:', editCaseButton);
    console.log('üì± Close view modal found:', closeViewModal);
    
    if (editCaseButton) {
        editCaseButton.addEventListener('click', function(e) {
            e.preventDefault();
            console.log('üì± Edit case button clicked');
            const caseData = JSON.parse(this.getAttribute('data-case'));
            hideModal('view-case-modal');
            loadCaseForEditing(caseData);
        });
        
        editCaseButton.addEventListener('touchstart', function(e) {
            e.preventDefault();
            console.log('üì± Edit case button touched');
            const caseData = JSON.parse(this.getAttribute('data-case'));
            hideModal('view-case-modal');
            loadCaseForEditing(caseData);
        });
    }
    
    if (closeViewModal) {
        closeViewModal.addEventListener('click', function(e) {
            e.preventDefault();
            console.log('üì± Close view modal clicked');
            hideModal('view-case-modal');
        });
        
        closeViewModal.addEventListener('touchstart', function(e) {
            e.preventDefault();
            console.log('üì± Close view modal touched');
            hideModal('view-case-modal');
        });
    }
    
    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
    const deleteConfirmModal = document.getElementById('delete-confirm-modal');
    const confirmDeleteButton = document.getElementById('confirm-delete');
    const cancelDeleteButton = document.getElementById('cancel-delete');
    
    console.log('üì± Delete confirm modal found:', deleteConfirmModal);
    console.log('üì± Confirm delete button found:', confirmDeleteButton);
    console.log('üì± Cancel delete button found:', cancelDeleteButton);
    
    if (confirmDeleteButton) {
        confirmDeleteButton.addEventListener('click', function(e) {
            e.preventDefault();
            console.log('üì± Confirm delete button clicked');
            const caseId = parseInt(this.getAttribute('data-case-id'));
            deleteCase(caseId);
            hideModal('delete-confirm-modal');
        });
        
        confirmDeleteButton.addEventListener('touchstart', function(e) {
            e.preventDefault();
            console.log('üì± Confirm delete button touched');
            const caseId = parseInt(this.getAttribute('data-case-id'));
            deleteCase(caseId);
            hideModal('delete-confirm-modal');
        });
    }
    
    if (cancelDeleteButton) {
        cancelDeleteButton.addEventListener('click', function(e) {
            e.preventDefault();
            console.log('üì± Cancel delete button clicked');
            hideModal('delete-confirm-modal');
        });
        
        cancelDeleteButton.addEventListener('touchstart', function(e) {
            e.preventDefault();
            console.log('üì± Cancel delete button touched');
            hideModal('delete-confirm-modal');
        });
    }
    
    console.log('üì± === Modals initialized successfully ===');
}

// –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function showModal(modalId) {
    console.log('üì± === FORCE SHOWING MODAL:', modalId, '===');
    const modal = document.getElementById(modalId);
    if (modal) {
        console.log('üì± Modal element found:', modal);
        
        // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ü–û–ö–ê–ó–´–í–ê–ù–ò–ï
        modal.style.position = 'fixed';
        modal.style.top = '0';
        modal.style.left = '0';
        modal.style.width = '100vw';
        modal.style.height = '100vh';
        modal.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';
        modal.style.display = 'flex';
        modal.style.visibility = 'visible';
        modal.style.opacity = '1';
        modal.style.zIndex = '999999';
        modal.style.justifyContent = 'center';
        modal.style.alignItems = 'center';
        modal.classList.add('show');
        
        console.log('‚úÖ Modal forced to show');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 100ms
        setTimeout(() => {
            const computedStyle = window.getComputedStyle(modal);
            console.log('üì± Modal computed display:', computedStyle.display);
            console.log('üì± Modal computed visibility:', computedStyle.visibility);
            console.log('üì± Modal computed opacity:', computedStyle.opacity);
        }, 100);
    } else {
        console.error('‚ùå Modal not found:', modalId);
    }
}

// –°–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function hideModal(modalId) {
    console.log('üì± === Hiding modal:', modalId, '===');
    const modal = document.getElementById(modalId);
    if (modal) {
        console.log('üì± Modal element found:', modal);
        modal.classList.remove('show');
        modal.style.display = 'none';
        modal.style.visibility = 'hidden';
        modal.style.opacity = '0';
        console.log('‚úÖ Modal hidden successfully');
    } else {
        console.error('‚ùå Modal not found:', modalId);
    }
}



// –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∫–µ–π—Å–∞
function showCaseModal(caseData) {
    console.log('üìã === Showing case modal ===');
    console.log('üìã Case data:', caseData);
    
    // –ü—Ä–æ—Å—Ç–æ–π alert –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–µ–π—Å–∞
    const message = `üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–µ–π—Å–∞: ${caseData.clientName}

üìÖ –î–∞—Ç–∞: ${caseData.date}
üéØ –¶–µ–ª–∏: ${caseData.goals || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚ùó –ü—Ä–æ–±–ª–µ–º—ã: ${caseData.problems || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: ${caseData.results || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üí° –ß—Ç–æ –ø–æ–º–æ–≥–ª–æ: ${caseData.whatHelped || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`;
    
    alert(message);
    console.log('‚úÖ Case modal shown');
}

// –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
function showDeleteConfirmModal(caseId) {
    console.log('üì± === Showing delete confirm modal for case:', caseId, '===');
    const confirmButton = document.getElementById('confirm-delete');
    confirmButton.setAttribute('data-case-id', caseId);
    showModal('delete-confirm-modal');
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∫–µ–π—Å–∞
function deleteCase(caseId) {
    console.log('üóëÔ∏è === Deleting case:', caseId, '===');
    const cases = getCases();
    const updatedCases = cases.filter(case_ => case_.id !== caseId);
    localStorage.setItem('cases_data', JSON.stringify(updatedCases));
    loadCasesList();
    console.log('‚úÖ Case deleted successfully');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–µ–π—Å–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function loadCaseForEditing(caseData) {
    console.log('üìù === Loading case for editing ===');
    console.log('üìù Case data:', caseData);
    
    // –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ –∫–µ–π—Å–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const question1 = document.getElementById('question-1');
    const question2 = document.getElementById('question-2');
    const question3 = document.getElementById('question-3');
    const question4 = document.getElementById('question-4');
    const question5 = document.getElementById('question-5');
    const question6 = document.getElementById('question-6');
    
    if (question1) question1.value = caseData.clientName || '';
    if (question2) question2.value = caseData.howFoundOut || '';
    if (question3) question3.value = caseData.goals || '';
    if (question4) question4.value = caseData.problems || '';
    if (question5) question5.value = caseData.results || '';
    if (question6) question6.value = caseData.whatHelped || '';
    
    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    window.editingCaseId = caseData.id;
    console.log('üìù Case loaded for editing:', caseData.clientName);
    console.log('üìù Editing case ID:', window.editingCaseId);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–µ–π—Å–æ–≤
function initializeViewCasesButton() {
    console.log('üìã Initializing view cases button');
    
    const viewCasesBtn = document.getElementById('view-cases-btn');
    if (viewCasesBtn) {
        viewCasesBtn.addEventListener('click', function() {
            console.log('üìã View cases button clicked');
            window.location.href = 'cases-list.html';
        });
        
        viewCasesBtn.addEventListener('touchstart', function(e) {
            e.preventDefault();
            console.log('üìã View cases button touched');
            window.location.href = 'cases-list.html';
        });
        
        console.log('‚úÖ View cases button handlers set up');
    } else {
        console.error('‚ùå View cases button not found');
    }
}

// –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ —á–µ—Ä–µ–∑ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
function showSuccessMessage() {
    console.log('üì± === Showing success message ===');
    console.log('üì± About to show save-modal');
    showModal('save-modal');
    console.log('üì± Success message modal should be visible now');
}
